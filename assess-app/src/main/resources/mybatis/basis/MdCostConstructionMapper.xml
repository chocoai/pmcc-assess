<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.copower.pmcc.assess.dal.basis.mapper.MdCostConstructionMapper">
  <resultMap id="BaseResultMap" type="com.copower.pmcc.assess.dal.basis.entity.MdCostConstruction">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="parcel_setting_outer" jdbcType="VARCHAR" property="parcelSettingOuter" />
    <result column="parcel_setting_inner" jdbcType="VARCHAR" property="parcelSettingInner" />
    <result column="construction_installation_engineering_fee_ids" jdbcType="VARCHAR" property="constructionInstallationEngineeringFeeIds" />
    <result column="construction_assessment_price_correcting" jdbcType="DECIMAL" property="constructionAssessmentPriceCorrecting" />
    <result column="construction_assessment_value" jdbcType="VARCHAR" property="constructionAssessmentValue" />
    <result column="investment_profit" jdbcType="VARCHAR" property="investmentProfit" />
    <result column="interest_investment" jdbcType="VARCHAR" property="interestInvestment" />
    <result column="construction_subtotal" jdbcType="VARCHAR" property="constructionSubtotal" />
    <result column="land_get_cost_total" jdbcType="VARCHAR" property="landGetCostTotal" />
    <result column="develop_land_area_tax" jdbcType="DECIMAL" property="developLandAreaTax" />
    <result column="develop_build_area_tax" jdbcType="DECIMAL" property="developBuildAreaTax" />
    <result column="develop_year_number_tax" jdbcType="DECIMAL" property="developYearNumberTax" />
    <result column="economic_id" jdbcType="INTEGER" property="economicId" />
    <result column="base_land_id" jdbcType="INTEGER" property="baseLandId" />
    <result column="approach_id" jdbcType="INTEGER" property="approachId" />
    <result column="mc_id" jdbcType="INTEGER" property="mcId" />
    <result column="land_purchase_price" jdbcType="DECIMAL" property="landPurchasePrice" />
    <result column="land_purchase_price_explain" jdbcType="VARCHAR" property="landPurchasePriceExplain" />
    <result column="land_get_relevant" jdbcType="DECIMAL" property="landGetRelevant" />
    <result column="land_get_relevant_explain" jdbcType="VARCHAR" property="landGetRelevantExplain" />
    <result column="reconnaissance_design" jdbcType="DECIMAL" property="reconnaissanceDesign" />
    <result column="construction_installation_engineering_fee" jdbcType="DECIMAL" property="constructionInstallationEngineeringFee" />
    <result column="infrastructure_cost" jdbcType="DECIMAL" property="infrastructureCost" />
    <result column="infrastructure_matching_cost" jdbcType="DECIMAL" property="infrastructureMatchingCost" />
    <result column="infrastructure_matching_cost_explain" jdbcType="VARCHAR" property="infrastructureMatchingCostExplain" />
    <result column="dev_during" jdbcType="DECIMAL" property="devDuring" />
    <result column="other_engineering_cost" jdbcType="DECIMAL" property="otherEngineeringCost" />
    <result column="unforeseen_expenses" jdbcType="DECIMAL" property="unforeseenExpenses" />
    <result column="unforeseen_expenses_explain" jdbcType="VARCHAR" property="unforeseenExpensesExplain" />
    <result column="management_expense" jdbcType="DECIMAL" property="managementExpense" />
    <result column="management_expense_explain" jdbcType="VARCHAR" property="managementExpenseExplain" />
    <result column="sales_fee" jdbcType="DECIMAL" property="salesFee" />
    <result column="sales_fee_explain" jdbcType="VARCHAR" property="salesFeeExplain" />
    <result column="interest_investment_tax" jdbcType="DECIMAL" property="interestInvestmentTax" />
    <result column="interest_investment_tax_explain" jdbcType="VARCHAR" property="interestInvestmentTaxExplain" />
    <result column="sales_tax_and_additional" jdbcType="DECIMAL" property="salesTaxAndAdditional" />
    <result column="sales_tax_and_additional_explain" jdbcType="VARCHAR" property="salesTaxAndAdditionalExplain" />
    <result column="investment_profit_tax" jdbcType="DECIMAL" property="investmentProfitTax" />
    <result column="investment_profit_tax_explain" jdbcType="VARCHAR" property="investmentProfitTaxExplain" />
    <result column="construction_assessment_value2" jdbcType="DECIMAL" property="constructionAssessmentValue2" />
    <result column="additional_cost_land_acquisition" jdbcType="DECIMAL" property="additionalCostLandAcquisition" />
    <result column="infrastructure_cost_explain" jdbcType="VARCHAR" property="infrastructureCostExplain" />
    <result column="dev_during_explain" jdbcType="VARCHAR" property="devDuringExplain" />
    <result column="other_engineering_cost_explain" jdbcType="VARCHAR" property="otherEngineeringCostExplain" />
    <result column="additional_cost_land_acquisition_explain" jdbcType="VARCHAR" property="additionalCostLandAcquisitionExplain" />
    <result column="reconnaissance_design_explain" jdbcType="VARCHAR" property="reconnaissanceDesignExplain" />
    <result column="residue_ratio_id" jdbcType="INTEGER" property="residueRatioId" />
    <result column="residue_ratio_remark" jdbcType="VARCHAR" property="residueRatioRemark" />
    <result column="residue_ratio" jdbcType="DECIMAL" property="residueRatio" />
    <result column="pid" jdbcType="INTEGER" property="pid" />
    <result column="center_id" jdbcType="INTEGER" property="centerId" />
    <result column="creator" jdbcType="VARCHAR" property="creator" />
    <result column="gmt_modified" jdbcType="TIMESTAMP" property="gmtModified" />
    <result column="gmt_created" jdbcType="TIMESTAMP" property="gmtCreated" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.copower.pmcc.assess.dal.basis.entity.MdCostConstruction">
    <result column="json_content" jdbcType="LONGVARCHAR" property="jsonContent" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, parcel_setting_outer, parcel_setting_inner, construction_installation_engineering_fee_ids, 
    construction_assessment_price_correcting, construction_assessment_value, investment_profit, 
    interest_investment, construction_subtotal, land_get_cost_total, develop_land_area_tax, 
    develop_build_area_tax, develop_year_number_tax, economic_id, base_land_id, approach_id, 
    mc_id, land_purchase_price, land_purchase_price_explain, land_get_relevant, land_get_relevant_explain, 
    reconnaissance_design, construction_installation_engineering_fee, infrastructure_cost, 
    infrastructure_matching_cost, infrastructure_matching_cost_explain, dev_during, other_engineering_cost, 
    unforeseen_expenses, unforeseen_expenses_explain, management_expense, management_expense_explain, 
    sales_fee, sales_fee_explain, interest_investment_tax, interest_investment_tax_explain, 
    sales_tax_and_additional, sales_tax_and_additional_explain, investment_profit_tax, 
    investment_profit_tax_explain, construction_assessment_value2, additional_cost_land_acquisition, 
    infrastructure_cost_explain, dev_during_explain, other_engineering_cost_explain, 
    additional_cost_land_acquisition_explain, reconnaissance_design_explain, residue_ratio_id, 
    residue_ratio_remark, residue_ratio, pid, center_id, creator, gmt_modified, gmt_created
  </sql>
  <sql id="Blob_Column_List">
    json_content
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="com.copower.pmcc.assess.dal.basis.entity.MdCostConstructionExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from tb_md_cost_construction
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="com.copower.pmcc.assess.dal.basis.entity.MdCostConstructionExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from tb_md_cost_construction
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from tb_md_cost_construction
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from tb_md_cost_construction
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.copower.pmcc.assess.dal.basis.entity.MdCostConstructionExample">
    delete from tb_md_cost_construction
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.copower.pmcc.assess.dal.basis.entity.MdCostConstruction">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into tb_md_cost_construction (parcel_setting_outer, parcel_setting_inner, 
      construction_installation_engineering_fee_ids, construction_assessment_price_correcting, 
      construction_assessment_value, investment_profit, 
      interest_investment, construction_subtotal, 
      land_get_cost_total, develop_land_area_tax, develop_build_area_tax, 
      develop_year_number_tax, economic_id, base_land_id, 
      approach_id, mc_id, land_purchase_price, 
      land_purchase_price_explain, land_get_relevant, 
      land_get_relevant_explain, reconnaissance_design, 
      construction_installation_engineering_fee, infrastructure_cost, 
      infrastructure_matching_cost, infrastructure_matching_cost_explain, 
      dev_during, other_engineering_cost, unforeseen_expenses, 
      unforeseen_expenses_explain, management_expense, 
      management_expense_explain, sales_fee, sales_fee_explain, 
      interest_investment_tax, interest_investment_tax_explain, 
      sales_tax_and_additional, sales_tax_and_additional_explain, 
      investment_profit_tax, investment_profit_tax_explain, 
      construction_assessment_value2, additional_cost_land_acquisition, 
      infrastructure_cost_explain, dev_during_explain, 
      other_engineering_cost_explain, additional_cost_land_acquisition_explain, 
      reconnaissance_design_explain, residue_ratio_id, 
      residue_ratio_remark, residue_ratio, pid, 
      center_id, creator, gmt_modified, 
      gmt_created, json_content)
    values (#{parcelSettingOuter,jdbcType=VARCHAR}, #{parcelSettingInner,jdbcType=VARCHAR}, 
      #{constructionInstallationEngineeringFeeIds,jdbcType=VARCHAR}, #{constructionAssessmentPriceCorrecting,jdbcType=DECIMAL}, 
      #{constructionAssessmentValue,jdbcType=VARCHAR}, #{investmentProfit,jdbcType=VARCHAR}, 
      #{interestInvestment,jdbcType=VARCHAR}, #{constructionSubtotal,jdbcType=VARCHAR}, 
      #{landGetCostTotal,jdbcType=VARCHAR}, #{developLandAreaTax,jdbcType=DECIMAL}, #{developBuildAreaTax,jdbcType=DECIMAL}, 
      #{developYearNumberTax,jdbcType=DECIMAL}, #{economicId,jdbcType=INTEGER}, #{baseLandId,jdbcType=INTEGER}, 
      #{approachId,jdbcType=INTEGER}, #{mcId,jdbcType=INTEGER}, #{landPurchasePrice,jdbcType=DECIMAL}, 
      #{landPurchasePriceExplain,jdbcType=VARCHAR}, #{landGetRelevant,jdbcType=DECIMAL}, 
      #{landGetRelevantExplain,jdbcType=VARCHAR}, #{reconnaissanceDesign,jdbcType=DECIMAL}, 
      #{constructionInstallationEngineeringFee,jdbcType=DECIMAL}, #{infrastructureCost,jdbcType=DECIMAL}, 
      #{infrastructureMatchingCost,jdbcType=DECIMAL}, #{infrastructureMatchingCostExplain,jdbcType=VARCHAR}, 
      #{devDuring,jdbcType=DECIMAL}, #{otherEngineeringCost,jdbcType=DECIMAL}, #{unforeseenExpenses,jdbcType=DECIMAL}, 
      #{unforeseenExpensesExplain,jdbcType=VARCHAR}, #{managementExpense,jdbcType=DECIMAL}, 
      #{managementExpenseExplain,jdbcType=VARCHAR}, #{salesFee,jdbcType=DECIMAL}, #{salesFeeExplain,jdbcType=VARCHAR}, 
      #{interestInvestmentTax,jdbcType=DECIMAL}, #{interestInvestmentTaxExplain,jdbcType=VARCHAR}, 
      #{salesTaxAndAdditional,jdbcType=DECIMAL}, #{salesTaxAndAdditionalExplain,jdbcType=VARCHAR}, 
      #{investmentProfitTax,jdbcType=DECIMAL}, #{investmentProfitTaxExplain,jdbcType=VARCHAR}, 
      #{constructionAssessmentValue2,jdbcType=DECIMAL}, #{additionalCostLandAcquisition,jdbcType=DECIMAL}, 
      #{infrastructureCostExplain,jdbcType=VARCHAR}, #{devDuringExplain,jdbcType=VARCHAR}, 
      #{otherEngineeringCostExplain,jdbcType=VARCHAR}, #{additionalCostLandAcquisitionExplain,jdbcType=VARCHAR}, 
      #{reconnaissanceDesignExplain,jdbcType=VARCHAR}, #{residueRatioId,jdbcType=INTEGER}, 
      #{residueRatioRemark,jdbcType=VARCHAR}, #{residueRatio,jdbcType=DECIMAL}, #{pid,jdbcType=INTEGER}, 
      #{centerId,jdbcType=INTEGER}, #{creator,jdbcType=VARCHAR}, #{gmtModified,jdbcType=TIMESTAMP}, 
      #{gmtCreated,jdbcType=TIMESTAMP}, #{jsonContent,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="map">
    <selectKey keyProperty="record.id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into tb_md_cost_construction
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach close=")" collection="selective" item="column" open="(" separator=",">
          ${column.escapedColumnName}
        </foreach>
      </when>
      <otherwise>
        <trim prefix="(" suffix=")" suffixOverrides=",">
          <if test="record.parcelSettingOuter != null">
            parcel_setting_outer,
          </if>
          <if test="record.parcelSettingInner != null">
            parcel_setting_inner,
          </if>
          <if test="record.constructionInstallationEngineeringFeeIds != null">
            construction_installation_engineering_fee_ids,
          </if>
          <if test="record.constructionAssessmentPriceCorrecting != null">
            construction_assessment_price_correcting,
          </if>
          <if test="record.constructionAssessmentValue != null">
            construction_assessment_value,
          </if>
          <if test="record.investmentProfit != null">
            investment_profit,
          </if>
          <if test="record.interestInvestment != null">
            interest_investment,
          </if>
          <if test="record.constructionSubtotal != null">
            construction_subtotal,
          </if>
          <if test="record.landGetCostTotal != null">
            land_get_cost_total,
          </if>
          <if test="record.developLandAreaTax != null">
            develop_land_area_tax,
          </if>
          <if test="record.developBuildAreaTax != null">
            develop_build_area_tax,
          </if>
          <if test="record.developYearNumberTax != null">
            develop_year_number_tax,
          </if>
          <if test="record.economicId != null">
            economic_id,
          </if>
          <if test="record.baseLandId != null">
            base_land_id,
          </if>
          <if test="record.approachId != null">
            approach_id,
          </if>
          <if test="record.mcId != null">
            mc_id,
          </if>
          <if test="record.landPurchasePrice != null">
            land_purchase_price,
          </if>
          <if test="record.landPurchasePriceExplain != null">
            land_purchase_price_explain,
          </if>
          <if test="record.landGetRelevant != null">
            land_get_relevant,
          </if>
          <if test="record.landGetRelevantExplain != null">
            land_get_relevant_explain,
          </if>
          <if test="record.reconnaissanceDesign != null">
            reconnaissance_design,
          </if>
          <if test="record.constructionInstallationEngineeringFee != null">
            construction_installation_engineering_fee,
          </if>
          <if test="record.infrastructureCost != null">
            infrastructure_cost,
          </if>
          <if test="record.infrastructureMatchingCost != null">
            infrastructure_matching_cost,
          </if>
          <if test="record.infrastructureMatchingCostExplain != null">
            infrastructure_matching_cost_explain,
          </if>
          <if test="record.devDuring != null">
            dev_during,
          </if>
          <if test="record.otherEngineeringCost != null">
            other_engineering_cost,
          </if>
          <if test="record.unforeseenExpenses != null">
            unforeseen_expenses,
          </if>
          <if test="record.unforeseenExpensesExplain != null">
            unforeseen_expenses_explain,
          </if>
          <if test="record.managementExpense != null">
            management_expense,
          </if>
          <if test="record.managementExpenseExplain != null">
            management_expense_explain,
          </if>
          <if test="record.salesFee != null">
            sales_fee,
          </if>
          <if test="record.salesFeeExplain != null">
            sales_fee_explain,
          </if>
          <if test="record.interestInvestmentTax != null">
            interest_investment_tax,
          </if>
          <if test="record.interestInvestmentTaxExplain != null">
            interest_investment_tax_explain,
          </if>
          <if test="record.salesTaxAndAdditional != null">
            sales_tax_and_additional,
          </if>
          <if test="record.salesTaxAndAdditionalExplain != null">
            sales_tax_and_additional_explain,
          </if>
          <if test="record.investmentProfitTax != null">
            investment_profit_tax,
          </if>
          <if test="record.investmentProfitTaxExplain != null">
            investment_profit_tax_explain,
          </if>
          <if test="record.constructionAssessmentValue2 != null">
            construction_assessment_value2,
          </if>
          <if test="record.additionalCostLandAcquisition != null">
            additional_cost_land_acquisition,
          </if>
          <if test="record.infrastructureCostExplain != null">
            infrastructure_cost_explain,
          </if>
          <if test="record.devDuringExplain != null">
            dev_during_explain,
          </if>
          <if test="record.otherEngineeringCostExplain != null">
            other_engineering_cost_explain,
          </if>
          <if test="record.additionalCostLandAcquisitionExplain != null">
            additional_cost_land_acquisition_explain,
          </if>
          <if test="record.reconnaissanceDesignExplain != null">
            reconnaissance_design_explain,
          </if>
          <if test="record.residueRatioId != null">
            residue_ratio_id,
          </if>
          <if test="record.residueRatioRemark != null">
            residue_ratio_remark,
          </if>
          <if test="record.residueRatio != null">
            residue_ratio,
          </if>
          <if test="record.pid != null">
            pid,
          </if>
          <if test="record.centerId != null">
            center_id,
          </if>
          <if test="record.creator != null">
            creator,
          </if>
          <if test="record.gmtModified != null">
            gmt_modified,
          </if>
          <if test="record.gmtCreated != null">
            gmt_created,
          </if>
          <if test="record.jsonContent != null">
            json_content,
          </if>
        </trim>
        <trim prefix="(" suffix=")" suffixOverrides="," />
      </otherwise>
    </choose>
    values
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach close=")" collection="selective" item="column" open="(" separator=",">
          #{record.${column.javaProperty},jdbcType=${column.jdbcType}}
        </foreach>
      </when>
      <otherwise>
        <trim prefix="(" suffix=")" suffixOverrides=",">
          <if test="record.parcelSettingOuter != null">
            #{record.parcelSettingOuter,jdbcType=VARCHAR},
          </if>
          <if test="record.parcelSettingInner != null">
            #{record.parcelSettingInner,jdbcType=VARCHAR},
          </if>
          <if test="record.constructionInstallationEngineeringFeeIds != null">
            #{record.constructionInstallationEngineeringFeeIds,jdbcType=VARCHAR},
          </if>
          <if test="record.constructionAssessmentPriceCorrecting != null">
            #{record.constructionAssessmentPriceCorrecting,jdbcType=DECIMAL},
          </if>
          <if test="record.constructionAssessmentValue != null">
            #{record.constructionAssessmentValue,jdbcType=VARCHAR},
          </if>
          <if test="record.investmentProfit != null">
            #{record.investmentProfit,jdbcType=VARCHAR},
          </if>
          <if test="record.interestInvestment != null">
            #{record.interestInvestment,jdbcType=VARCHAR},
          </if>
          <if test="record.constructionSubtotal != null">
            #{record.constructionSubtotal,jdbcType=VARCHAR},
          </if>
          <if test="record.landGetCostTotal != null">
            #{record.landGetCostTotal,jdbcType=VARCHAR},
          </if>
          <if test="record.developLandAreaTax != null">
            #{record.developLandAreaTax,jdbcType=DECIMAL},
          </if>
          <if test="record.developBuildAreaTax != null">
            #{record.developBuildAreaTax,jdbcType=DECIMAL},
          </if>
          <if test="record.developYearNumberTax != null">
            #{record.developYearNumberTax,jdbcType=DECIMAL},
          </if>
          <if test="record.economicId != null">
            #{record.economicId,jdbcType=INTEGER},
          </if>
          <if test="record.baseLandId != null">
            #{record.baseLandId,jdbcType=INTEGER},
          </if>
          <if test="record.approachId != null">
            #{record.approachId,jdbcType=INTEGER},
          </if>
          <if test="record.mcId != null">
            #{record.mcId,jdbcType=INTEGER},
          </if>
          <if test="record.landPurchasePrice != null">
            #{record.landPurchasePrice,jdbcType=DECIMAL},
          </if>
          <if test="record.landPurchasePriceExplain != null">
            #{record.landPurchasePriceExplain,jdbcType=VARCHAR},
          </if>
          <if test="record.landGetRelevant != null">
            #{record.landGetRelevant,jdbcType=DECIMAL},
          </if>
          <if test="record.landGetRelevantExplain != null">
            #{record.landGetRelevantExplain,jdbcType=VARCHAR},
          </if>
          <if test="record.reconnaissanceDesign != null">
            #{record.reconnaissanceDesign,jdbcType=DECIMAL},
          </if>
          <if test="record.constructionInstallationEngineeringFee != null">
            #{record.constructionInstallationEngineeringFee,jdbcType=DECIMAL},
          </if>
          <if test="record.infrastructureCost != null">
            #{record.infrastructureCost,jdbcType=DECIMAL},
          </if>
          <if test="record.infrastructureMatchingCost != null">
            #{record.infrastructureMatchingCost,jdbcType=DECIMAL},
          </if>
          <if test="record.infrastructureMatchingCostExplain != null">
            #{record.infrastructureMatchingCostExplain,jdbcType=VARCHAR},
          </if>
          <if test="record.devDuring != null">
            #{record.devDuring,jdbcType=DECIMAL},
          </if>
          <if test="record.otherEngineeringCost != null">
            #{record.otherEngineeringCost,jdbcType=DECIMAL},
          </if>
          <if test="record.unforeseenExpenses != null">
            #{record.unforeseenExpenses,jdbcType=DECIMAL},
          </if>
          <if test="record.unforeseenExpensesExplain != null">
            #{record.unforeseenExpensesExplain,jdbcType=VARCHAR},
          </if>
          <if test="record.managementExpense != null">
            #{record.managementExpense,jdbcType=DECIMAL},
          </if>
          <if test="record.managementExpenseExplain != null">
            #{record.managementExpenseExplain,jdbcType=VARCHAR},
          </if>
          <if test="record.salesFee != null">
            #{record.salesFee,jdbcType=DECIMAL},
          </if>
          <if test="record.salesFeeExplain != null">
            #{record.salesFeeExplain,jdbcType=VARCHAR},
          </if>
          <if test="record.interestInvestmentTax != null">
            #{record.interestInvestmentTax,jdbcType=DECIMAL},
          </if>
          <if test="record.interestInvestmentTaxExplain != null">
            #{record.interestInvestmentTaxExplain,jdbcType=VARCHAR},
          </if>
          <if test="record.salesTaxAndAdditional != null">
            #{record.salesTaxAndAdditional,jdbcType=DECIMAL},
          </if>
          <if test="record.salesTaxAndAdditionalExplain != null">
            #{record.salesTaxAndAdditionalExplain,jdbcType=VARCHAR},
          </if>
          <if test="record.investmentProfitTax != null">
            #{record.investmentProfitTax,jdbcType=DECIMAL},
          </if>
          <if test="record.investmentProfitTaxExplain != null">
            #{record.investmentProfitTaxExplain,jdbcType=VARCHAR},
          </if>
          <if test="record.constructionAssessmentValue2 != null">
            #{record.constructionAssessmentValue2,jdbcType=DECIMAL},
          </if>
          <if test="record.additionalCostLandAcquisition != null">
            #{record.additionalCostLandAcquisition,jdbcType=DECIMAL},
          </if>
          <if test="record.infrastructureCostExplain != null">
            #{record.infrastructureCostExplain,jdbcType=VARCHAR},
          </if>
          <if test="record.devDuringExplain != null">
            #{record.devDuringExplain,jdbcType=VARCHAR},
          </if>
          <if test="record.otherEngineeringCostExplain != null">
            #{record.otherEngineeringCostExplain,jdbcType=VARCHAR},
          </if>
          <if test="record.additionalCostLandAcquisitionExplain != null">
            #{record.additionalCostLandAcquisitionExplain,jdbcType=VARCHAR},
          </if>
          <if test="record.reconnaissanceDesignExplain != null">
            #{record.reconnaissanceDesignExplain,jdbcType=VARCHAR},
          </if>
          <if test="record.residueRatioId != null">
            #{record.residueRatioId,jdbcType=INTEGER},
          </if>
          <if test="record.residueRatioRemark != null">
            #{record.residueRatioRemark,jdbcType=VARCHAR},
          </if>
          <if test="record.residueRatio != null">
            #{record.residueRatio,jdbcType=DECIMAL},
          </if>
          <if test="record.pid != null">
            #{record.pid,jdbcType=INTEGER},
          </if>
          <if test="record.centerId != null">
            #{record.centerId,jdbcType=INTEGER},
          </if>
          <if test="record.creator != null">
            #{record.creator,jdbcType=VARCHAR},
          </if>
          <if test="record.gmtModified != null">
            #{record.gmtModified,jdbcType=TIMESTAMP},
          </if>
          <if test="record.gmtCreated != null">
            #{record.gmtCreated,jdbcType=TIMESTAMP},
          </if>
          <if test="record.jsonContent != null">
            #{record.jsonContent,jdbcType=LONGVARCHAR},
          </if>
        </trim>
      </otherwise>
    </choose>
  </insert>
  <select id="countByExample" parameterType="com.copower.pmcc.assess.dal.basis.entity.MdCostConstructionExample" resultType="java.lang.Long">
    select count(*) from tb_md_cost_construction
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update tb_md_cost_construction
    SET
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.escapedColumnName} = #{record.${column.javaProperty},jdbcType=${column.jdbcType}}
        </foreach>
      </when>
      <otherwise>
        <trim suffixOverrides=",">
          <if test="record.id != null">
            id = #{record.id,jdbcType=INTEGER},
          </if>
          <if test="record.parcelSettingOuter != null">
            parcel_setting_outer = #{record.parcelSettingOuter,jdbcType=VARCHAR},
          </if>
          <if test="record.parcelSettingInner != null">
            parcel_setting_inner = #{record.parcelSettingInner,jdbcType=VARCHAR},
          </if>
          <if test="record.constructionInstallationEngineeringFeeIds != null">
            construction_installation_engineering_fee_ids = #{record.constructionInstallationEngineeringFeeIds,jdbcType=VARCHAR},
          </if>
          <if test="record.constructionAssessmentPriceCorrecting != null">
            construction_assessment_price_correcting = #{record.constructionAssessmentPriceCorrecting,jdbcType=DECIMAL},
          </if>
          <if test="record.constructionAssessmentValue != null">
            construction_assessment_value = #{record.constructionAssessmentValue,jdbcType=VARCHAR},
          </if>
          <if test="record.investmentProfit != null">
            investment_profit = #{record.investmentProfit,jdbcType=VARCHAR},
          </if>
          <if test="record.interestInvestment != null">
            interest_investment = #{record.interestInvestment,jdbcType=VARCHAR},
          </if>
          <if test="record.constructionSubtotal != null">
            construction_subtotal = #{record.constructionSubtotal,jdbcType=VARCHAR},
          </if>
          <if test="record.landGetCostTotal != null">
            land_get_cost_total = #{record.landGetCostTotal,jdbcType=VARCHAR},
          </if>
          <if test="record.developLandAreaTax != null">
            develop_land_area_tax = #{record.developLandAreaTax,jdbcType=DECIMAL},
          </if>
          <if test="record.developBuildAreaTax != null">
            develop_build_area_tax = #{record.developBuildAreaTax,jdbcType=DECIMAL},
          </if>
          <if test="record.developYearNumberTax != null">
            develop_year_number_tax = #{record.developYearNumberTax,jdbcType=DECIMAL},
          </if>
          <if test="record.economicId != null">
            economic_id = #{record.economicId,jdbcType=INTEGER},
          </if>
          <if test="record.baseLandId != null">
            base_land_id = #{record.baseLandId,jdbcType=INTEGER},
          </if>
          <if test="record.approachId != null">
            approach_id = #{record.approachId,jdbcType=INTEGER},
          </if>
          <if test="record.mcId != null">
            mc_id = #{record.mcId,jdbcType=INTEGER},
          </if>
          <if test="record.landPurchasePrice != null">
            land_purchase_price = #{record.landPurchasePrice,jdbcType=DECIMAL},
          </if>
          <if test="record.landPurchasePriceExplain != null">
            land_purchase_price_explain = #{record.landPurchasePriceExplain,jdbcType=VARCHAR},
          </if>
          <if test="record.landGetRelevant != null">
            land_get_relevant = #{record.landGetRelevant,jdbcType=DECIMAL},
          </if>
          <if test="record.landGetRelevantExplain != null">
            land_get_relevant_explain = #{record.landGetRelevantExplain,jdbcType=VARCHAR},
          </if>
          <if test="record.reconnaissanceDesign != null">
            reconnaissance_design = #{record.reconnaissanceDesign,jdbcType=DECIMAL},
          </if>
          <if test="record.constructionInstallationEngineeringFee != null">
            construction_installation_engineering_fee = #{record.constructionInstallationEngineeringFee,jdbcType=DECIMAL},
          </if>
          <if test="record.infrastructureCost != null">
            infrastructure_cost = #{record.infrastructureCost,jdbcType=DECIMAL},
          </if>
          <if test="record.infrastructureMatchingCost != null">
            infrastructure_matching_cost = #{record.infrastructureMatchingCost,jdbcType=DECIMAL},
          </if>
          <if test="record.infrastructureMatchingCostExplain != null">
            infrastructure_matching_cost_explain = #{record.infrastructureMatchingCostExplain,jdbcType=VARCHAR},
          </if>
          <if test="record.devDuring != null">
            dev_during = #{record.devDuring,jdbcType=DECIMAL},
          </if>
          <if test="record.otherEngineeringCost != null">
            other_engineering_cost = #{record.otherEngineeringCost,jdbcType=DECIMAL},
          </if>
          <if test="record.unforeseenExpenses != null">
            unforeseen_expenses = #{record.unforeseenExpenses,jdbcType=DECIMAL},
          </if>
          <if test="record.unforeseenExpensesExplain != null">
            unforeseen_expenses_explain = #{record.unforeseenExpensesExplain,jdbcType=VARCHAR},
          </if>
          <if test="record.managementExpense != null">
            management_expense = #{record.managementExpense,jdbcType=DECIMAL},
          </if>
          <if test="record.managementExpenseExplain != null">
            management_expense_explain = #{record.managementExpenseExplain,jdbcType=VARCHAR},
          </if>
          <if test="record.salesFee != null">
            sales_fee = #{record.salesFee,jdbcType=DECIMAL},
          </if>
          <if test="record.salesFeeExplain != null">
            sales_fee_explain = #{record.salesFeeExplain,jdbcType=VARCHAR},
          </if>
          <if test="record.interestInvestmentTax != null">
            interest_investment_tax = #{record.interestInvestmentTax,jdbcType=DECIMAL},
          </if>
          <if test="record.interestInvestmentTaxExplain != null">
            interest_investment_tax_explain = #{record.interestInvestmentTaxExplain,jdbcType=VARCHAR},
          </if>
          <if test="record.salesTaxAndAdditional != null">
            sales_tax_and_additional = #{record.salesTaxAndAdditional,jdbcType=DECIMAL},
          </if>
          <if test="record.salesTaxAndAdditionalExplain != null">
            sales_tax_and_additional_explain = #{record.salesTaxAndAdditionalExplain,jdbcType=VARCHAR},
          </if>
          <if test="record.investmentProfitTax != null">
            investment_profit_tax = #{record.investmentProfitTax,jdbcType=DECIMAL},
          </if>
          <if test="record.investmentProfitTaxExplain != null">
            investment_profit_tax_explain = #{record.investmentProfitTaxExplain,jdbcType=VARCHAR},
          </if>
          <if test="record.constructionAssessmentValue2 != null">
            construction_assessment_value2 = #{record.constructionAssessmentValue2,jdbcType=DECIMAL},
          </if>
          <if test="record.additionalCostLandAcquisition != null">
            additional_cost_land_acquisition = #{record.additionalCostLandAcquisition,jdbcType=DECIMAL},
          </if>
          <if test="record.infrastructureCostExplain != null">
            infrastructure_cost_explain = #{record.infrastructureCostExplain,jdbcType=VARCHAR},
          </if>
          <if test="record.devDuringExplain != null">
            dev_during_explain = #{record.devDuringExplain,jdbcType=VARCHAR},
          </if>
          <if test="record.otherEngineeringCostExplain != null">
            other_engineering_cost_explain = #{record.otherEngineeringCostExplain,jdbcType=VARCHAR},
          </if>
          <if test="record.additionalCostLandAcquisitionExplain != null">
            additional_cost_land_acquisition_explain = #{record.additionalCostLandAcquisitionExplain,jdbcType=VARCHAR},
          </if>
          <if test="record.reconnaissanceDesignExplain != null">
            reconnaissance_design_explain = #{record.reconnaissanceDesignExplain,jdbcType=VARCHAR},
          </if>
          <if test="record.residueRatioId != null">
            residue_ratio_id = #{record.residueRatioId,jdbcType=INTEGER},
          </if>
          <if test="record.residueRatioRemark != null">
            residue_ratio_remark = #{record.residueRatioRemark,jdbcType=VARCHAR},
          </if>
          <if test="record.residueRatio != null">
            residue_ratio = #{record.residueRatio,jdbcType=DECIMAL},
          </if>
          <if test="record.pid != null">
            pid = #{record.pid,jdbcType=INTEGER},
          </if>
          <if test="record.centerId != null">
            center_id = #{record.centerId,jdbcType=INTEGER},
          </if>
          <if test="record.creator != null">
            creator = #{record.creator,jdbcType=VARCHAR},
          </if>
          <if test="record.gmtModified != null">
            gmt_modified = #{record.gmtModified,jdbcType=TIMESTAMP},
          </if>
          <if test="record.gmtCreated != null">
            gmt_created = #{record.gmtCreated,jdbcType=TIMESTAMP},
          </if>
          <if test="record.jsonContent != null">
            json_content = #{record.jsonContent,jdbcType=LONGVARCHAR},
          </if>
        </trim>
      </otherwise>
    </choose>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update tb_md_cost_construction
    set id = #{record.id,jdbcType=INTEGER},
      parcel_setting_outer = #{record.parcelSettingOuter,jdbcType=VARCHAR},
      parcel_setting_inner = #{record.parcelSettingInner,jdbcType=VARCHAR},
      construction_installation_engineering_fee_ids = #{record.constructionInstallationEngineeringFeeIds,jdbcType=VARCHAR},
      construction_assessment_price_correcting = #{record.constructionAssessmentPriceCorrecting,jdbcType=DECIMAL},
      construction_assessment_value = #{record.constructionAssessmentValue,jdbcType=VARCHAR},
      investment_profit = #{record.investmentProfit,jdbcType=VARCHAR},
      interest_investment = #{record.interestInvestment,jdbcType=VARCHAR},
      construction_subtotal = #{record.constructionSubtotal,jdbcType=VARCHAR},
      land_get_cost_total = #{record.landGetCostTotal,jdbcType=VARCHAR},
      develop_land_area_tax = #{record.developLandAreaTax,jdbcType=DECIMAL},
      develop_build_area_tax = #{record.developBuildAreaTax,jdbcType=DECIMAL},
      develop_year_number_tax = #{record.developYearNumberTax,jdbcType=DECIMAL},
      economic_id = #{record.economicId,jdbcType=INTEGER},
      base_land_id = #{record.baseLandId,jdbcType=INTEGER},
      approach_id = #{record.approachId,jdbcType=INTEGER},
      mc_id = #{record.mcId,jdbcType=INTEGER},
      land_purchase_price = #{record.landPurchasePrice,jdbcType=DECIMAL},
      land_purchase_price_explain = #{record.landPurchasePriceExplain,jdbcType=VARCHAR},
      land_get_relevant = #{record.landGetRelevant,jdbcType=DECIMAL},
      land_get_relevant_explain = #{record.landGetRelevantExplain,jdbcType=VARCHAR},
      reconnaissance_design = #{record.reconnaissanceDesign,jdbcType=DECIMAL},
      construction_installation_engineering_fee = #{record.constructionInstallationEngineeringFee,jdbcType=DECIMAL},
      infrastructure_cost = #{record.infrastructureCost,jdbcType=DECIMAL},
      infrastructure_matching_cost = #{record.infrastructureMatchingCost,jdbcType=DECIMAL},
      infrastructure_matching_cost_explain = #{record.infrastructureMatchingCostExplain,jdbcType=VARCHAR},
      dev_during = #{record.devDuring,jdbcType=DECIMAL},
      other_engineering_cost = #{record.otherEngineeringCost,jdbcType=DECIMAL},
      unforeseen_expenses = #{record.unforeseenExpenses,jdbcType=DECIMAL},
      unforeseen_expenses_explain = #{record.unforeseenExpensesExplain,jdbcType=VARCHAR},
      management_expense = #{record.managementExpense,jdbcType=DECIMAL},
      management_expense_explain = #{record.managementExpenseExplain,jdbcType=VARCHAR},
      sales_fee = #{record.salesFee,jdbcType=DECIMAL},
      sales_fee_explain = #{record.salesFeeExplain,jdbcType=VARCHAR},
      interest_investment_tax = #{record.interestInvestmentTax,jdbcType=DECIMAL},
      interest_investment_tax_explain = #{record.interestInvestmentTaxExplain,jdbcType=VARCHAR},
      sales_tax_and_additional = #{record.salesTaxAndAdditional,jdbcType=DECIMAL},
      sales_tax_and_additional_explain = #{record.salesTaxAndAdditionalExplain,jdbcType=VARCHAR},
      investment_profit_tax = #{record.investmentProfitTax,jdbcType=DECIMAL},
      investment_profit_tax_explain = #{record.investmentProfitTaxExplain,jdbcType=VARCHAR},
      construction_assessment_value2 = #{record.constructionAssessmentValue2,jdbcType=DECIMAL},
      additional_cost_land_acquisition = #{record.additionalCostLandAcquisition,jdbcType=DECIMAL},
      infrastructure_cost_explain = #{record.infrastructureCostExplain,jdbcType=VARCHAR},
      dev_during_explain = #{record.devDuringExplain,jdbcType=VARCHAR},
      other_engineering_cost_explain = #{record.otherEngineeringCostExplain,jdbcType=VARCHAR},
      additional_cost_land_acquisition_explain = #{record.additionalCostLandAcquisitionExplain,jdbcType=VARCHAR},
      reconnaissance_design_explain = #{record.reconnaissanceDesignExplain,jdbcType=VARCHAR},
      residue_ratio_id = #{record.residueRatioId,jdbcType=INTEGER},
      residue_ratio_remark = #{record.residueRatioRemark,jdbcType=VARCHAR},
      residue_ratio = #{record.residueRatio,jdbcType=DECIMAL},
      pid = #{record.pid,jdbcType=INTEGER},
      center_id = #{record.centerId,jdbcType=INTEGER},
      creator = #{record.creator,jdbcType=VARCHAR},
      gmt_modified = #{record.gmtModified,jdbcType=TIMESTAMP},
      gmt_created = #{record.gmtCreated,jdbcType=TIMESTAMP},
      json_content = #{record.jsonContent,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update tb_md_cost_construction
    set id = #{record.id,jdbcType=INTEGER},
      parcel_setting_outer = #{record.parcelSettingOuter,jdbcType=VARCHAR},
      parcel_setting_inner = #{record.parcelSettingInner,jdbcType=VARCHAR},
      construction_installation_engineering_fee_ids = #{record.constructionInstallationEngineeringFeeIds,jdbcType=VARCHAR},
      construction_assessment_price_correcting = #{record.constructionAssessmentPriceCorrecting,jdbcType=DECIMAL},
      construction_assessment_value = #{record.constructionAssessmentValue,jdbcType=VARCHAR},
      investment_profit = #{record.investmentProfit,jdbcType=VARCHAR},
      interest_investment = #{record.interestInvestment,jdbcType=VARCHAR},
      construction_subtotal = #{record.constructionSubtotal,jdbcType=VARCHAR},
      land_get_cost_total = #{record.landGetCostTotal,jdbcType=VARCHAR},
      develop_land_area_tax = #{record.developLandAreaTax,jdbcType=DECIMAL},
      develop_build_area_tax = #{record.developBuildAreaTax,jdbcType=DECIMAL},
      develop_year_number_tax = #{record.developYearNumberTax,jdbcType=DECIMAL},
      economic_id = #{record.economicId,jdbcType=INTEGER},
      base_land_id = #{record.baseLandId,jdbcType=INTEGER},
      approach_id = #{record.approachId,jdbcType=INTEGER},
      mc_id = #{record.mcId,jdbcType=INTEGER},
      land_purchase_price = #{record.landPurchasePrice,jdbcType=DECIMAL},
      land_purchase_price_explain = #{record.landPurchasePriceExplain,jdbcType=VARCHAR},
      land_get_relevant = #{record.landGetRelevant,jdbcType=DECIMAL},
      land_get_relevant_explain = #{record.landGetRelevantExplain,jdbcType=VARCHAR},
      reconnaissance_design = #{record.reconnaissanceDesign,jdbcType=DECIMAL},
      construction_installation_engineering_fee = #{record.constructionInstallationEngineeringFee,jdbcType=DECIMAL},
      infrastructure_cost = #{record.infrastructureCost,jdbcType=DECIMAL},
      infrastructure_matching_cost = #{record.infrastructureMatchingCost,jdbcType=DECIMAL},
      infrastructure_matching_cost_explain = #{record.infrastructureMatchingCostExplain,jdbcType=VARCHAR},
      dev_during = #{record.devDuring,jdbcType=DECIMAL},
      other_engineering_cost = #{record.otherEngineeringCost,jdbcType=DECIMAL},
      unforeseen_expenses = #{record.unforeseenExpenses,jdbcType=DECIMAL},
      unforeseen_expenses_explain = #{record.unforeseenExpensesExplain,jdbcType=VARCHAR},
      management_expense = #{record.managementExpense,jdbcType=DECIMAL},
      management_expense_explain = #{record.managementExpenseExplain,jdbcType=VARCHAR},
      sales_fee = #{record.salesFee,jdbcType=DECIMAL},
      sales_fee_explain = #{record.salesFeeExplain,jdbcType=VARCHAR},
      interest_investment_tax = #{record.interestInvestmentTax,jdbcType=DECIMAL},
      interest_investment_tax_explain = #{record.interestInvestmentTaxExplain,jdbcType=VARCHAR},
      sales_tax_and_additional = #{record.salesTaxAndAdditional,jdbcType=DECIMAL},
      sales_tax_and_additional_explain = #{record.salesTaxAndAdditionalExplain,jdbcType=VARCHAR},
      investment_profit_tax = #{record.investmentProfitTax,jdbcType=DECIMAL},
      investment_profit_tax_explain = #{record.investmentProfitTaxExplain,jdbcType=VARCHAR},
      construction_assessment_value2 = #{record.constructionAssessmentValue2,jdbcType=DECIMAL},
      additional_cost_land_acquisition = #{record.additionalCostLandAcquisition,jdbcType=DECIMAL},
      infrastructure_cost_explain = #{record.infrastructureCostExplain,jdbcType=VARCHAR},
      dev_during_explain = #{record.devDuringExplain,jdbcType=VARCHAR},
      other_engineering_cost_explain = #{record.otherEngineeringCostExplain,jdbcType=VARCHAR},
      additional_cost_land_acquisition_explain = #{record.additionalCostLandAcquisitionExplain,jdbcType=VARCHAR},
      reconnaissance_design_explain = #{record.reconnaissanceDesignExplain,jdbcType=VARCHAR},
      residue_ratio_id = #{record.residueRatioId,jdbcType=INTEGER},
      residue_ratio_remark = #{record.residueRatioRemark,jdbcType=VARCHAR},
      residue_ratio = #{record.residueRatio,jdbcType=DECIMAL},
      pid = #{record.pid,jdbcType=INTEGER},
      center_id = #{record.centerId,jdbcType=INTEGER},
      creator = #{record.creator,jdbcType=VARCHAR},
      gmt_modified = #{record.gmtModified,jdbcType=TIMESTAMP},
      gmt_created = #{record.gmtCreated,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="map">
    update tb_md_cost_construction
    SET
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.escapedColumnName} = #{record.${column.javaProperty},jdbcType=${column.jdbcType}}
        </foreach>
      </when>
      <otherwise>
        <trim suffixOverrides=",">
          <if test="record.parcelSettingOuter != null">
            parcel_setting_outer = #{record.parcelSettingOuter,jdbcType=VARCHAR},
          </if>
          <if test="record.parcelSettingInner != null">
            parcel_setting_inner = #{record.parcelSettingInner,jdbcType=VARCHAR},
          </if>
          <if test="record.constructionInstallationEngineeringFeeIds != null">
            construction_installation_engineering_fee_ids = #{record.constructionInstallationEngineeringFeeIds,jdbcType=VARCHAR},
          </if>
          <if test="record.constructionAssessmentPriceCorrecting != null">
            construction_assessment_price_correcting = #{record.constructionAssessmentPriceCorrecting,jdbcType=DECIMAL},
          </if>
          <if test="record.constructionAssessmentValue != null">
            construction_assessment_value = #{record.constructionAssessmentValue,jdbcType=VARCHAR},
          </if>
          <if test="record.investmentProfit != null">
            investment_profit = #{record.investmentProfit,jdbcType=VARCHAR},
          </if>
          <if test="record.interestInvestment != null">
            interest_investment = #{record.interestInvestment,jdbcType=VARCHAR},
          </if>
          <if test="record.constructionSubtotal != null">
            construction_subtotal = #{record.constructionSubtotal,jdbcType=VARCHAR},
          </if>
          <if test="record.landGetCostTotal != null">
            land_get_cost_total = #{record.landGetCostTotal,jdbcType=VARCHAR},
          </if>
          <if test="record.developLandAreaTax != null">
            develop_land_area_tax = #{record.developLandAreaTax,jdbcType=DECIMAL},
          </if>
          <if test="record.developBuildAreaTax != null">
            develop_build_area_tax = #{record.developBuildAreaTax,jdbcType=DECIMAL},
          </if>
          <if test="record.developYearNumberTax != null">
            develop_year_number_tax = #{record.developYearNumberTax,jdbcType=DECIMAL},
          </if>
          <if test="record.economicId != null">
            economic_id = #{record.economicId,jdbcType=INTEGER},
          </if>
          <if test="record.baseLandId != null">
            base_land_id = #{record.baseLandId,jdbcType=INTEGER},
          </if>
          <if test="record.approachId != null">
            approach_id = #{record.approachId,jdbcType=INTEGER},
          </if>
          <if test="record.mcId != null">
            mc_id = #{record.mcId,jdbcType=INTEGER},
          </if>
          <if test="record.landPurchasePrice != null">
            land_purchase_price = #{record.landPurchasePrice,jdbcType=DECIMAL},
          </if>
          <if test="record.landPurchasePriceExplain != null">
            land_purchase_price_explain = #{record.landPurchasePriceExplain,jdbcType=VARCHAR},
          </if>
          <if test="record.landGetRelevant != null">
            land_get_relevant = #{record.landGetRelevant,jdbcType=DECIMAL},
          </if>
          <if test="record.landGetRelevantExplain != null">
            land_get_relevant_explain = #{record.landGetRelevantExplain,jdbcType=VARCHAR},
          </if>
          <if test="record.reconnaissanceDesign != null">
            reconnaissance_design = #{record.reconnaissanceDesign,jdbcType=DECIMAL},
          </if>
          <if test="record.constructionInstallationEngineeringFee != null">
            construction_installation_engineering_fee = #{record.constructionInstallationEngineeringFee,jdbcType=DECIMAL},
          </if>
          <if test="record.infrastructureCost != null">
            infrastructure_cost = #{record.infrastructureCost,jdbcType=DECIMAL},
          </if>
          <if test="record.infrastructureMatchingCost != null">
            infrastructure_matching_cost = #{record.infrastructureMatchingCost,jdbcType=DECIMAL},
          </if>
          <if test="record.infrastructureMatchingCostExplain != null">
            infrastructure_matching_cost_explain = #{record.infrastructureMatchingCostExplain,jdbcType=VARCHAR},
          </if>
          <if test="record.devDuring != null">
            dev_during = #{record.devDuring,jdbcType=DECIMAL},
          </if>
          <if test="record.otherEngineeringCost != null">
            other_engineering_cost = #{record.otherEngineeringCost,jdbcType=DECIMAL},
          </if>
          <if test="record.unforeseenExpenses != null">
            unforeseen_expenses = #{record.unforeseenExpenses,jdbcType=DECIMAL},
          </if>
          <if test="record.unforeseenExpensesExplain != null">
            unforeseen_expenses_explain = #{record.unforeseenExpensesExplain,jdbcType=VARCHAR},
          </if>
          <if test="record.managementExpense != null">
            management_expense = #{record.managementExpense,jdbcType=DECIMAL},
          </if>
          <if test="record.managementExpenseExplain != null">
            management_expense_explain = #{record.managementExpenseExplain,jdbcType=VARCHAR},
          </if>
          <if test="record.salesFee != null">
            sales_fee = #{record.salesFee,jdbcType=DECIMAL},
          </if>
          <if test="record.salesFeeExplain != null">
            sales_fee_explain = #{record.salesFeeExplain,jdbcType=VARCHAR},
          </if>
          <if test="record.interestInvestmentTax != null">
            interest_investment_tax = #{record.interestInvestmentTax,jdbcType=DECIMAL},
          </if>
          <if test="record.interestInvestmentTaxExplain != null">
            interest_investment_tax_explain = #{record.interestInvestmentTaxExplain,jdbcType=VARCHAR},
          </if>
          <if test="record.salesTaxAndAdditional != null">
            sales_tax_and_additional = #{record.salesTaxAndAdditional,jdbcType=DECIMAL},
          </if>
          <if test="record.salesTaxAndAdditionalExplain != null">
            sales_tax_and_additional_explain = #{record.salesTaxAndAdditionalExplain,jdbcType=VARCHAR},
          </if>
          <if test="record.investmentProfitTax != null">
            investment_profit_tax = #{record.investmentProfitTax,jdbcType=DECIMAL},
          </if>
          <if test="record.investmentProfitTaxExplain != null">
            investment_profit_tax_explain = #{record.investmentProfitTaxExplain,jdbcType=VARCHAR},
          </if>
          <if test="record.constructionAssessmentValue2 != null">
            construction_assessment_value2 = #{record.constructionAssessmentValue2,jdbcType=DECIMAL},
          </if>
          <if test="record.additionalCostLandAcquisition != null">
            additional_cost_land_acquisition = #{record.additionalCostLandAcquisition,jdbcType=DECIMAL},
          </if>
          <if test="record.infrastructureCostExplain != null">
            infrastructure_cost_explain = #{record.infrastructureCostExplain,jdbcType=VARCHAR},
          </if>
          <if test="record.devDuringExplain != null">
            dev_during_explain = #{record.devDuringExplain,jdbcType=VARCHAR},
          </if>
          <if test="record.otherEngineeringCostExplain != null">
            other_engineering_cost_explain = #{record.otherEngineeringCostExplain,jdbcType=VARCHAR},
          </if>
          <if test="record.additionalCostLandAcquisitionExplain != null">
            additional_cost_land_acquisition_explain = #{record.additionalCostLandAcquisitionExplain,jdbcType=VARCHAR},
          </if>
          <if test="record.reconnaissanceDesignExplain != null">
            reconnaissance_design_explain = #{record.reconnaissanceDesignExplain,jdbcType=VARCHAR},
          </if>
          <if test="record.residueRatioId != null">
            residue_ratio_id = #{record.residueRatioId,jdbcType=INTEGER},
          </if>
          <if test="record.residueRatioRemark != null">
            residue_ratio_remark = #{record.residueRatioRemark,jdbcType=VARCHAR},
          </if>
          <if test="record.residueRatio != null">
            residue_ratio = #{record.residueRatio,jdbcType=DECIMAL},
          </if>
          <if test="record.pid != null">
            pid = #{record.pid,jdbcType=INTEGER},
          </if>
          <if test="record.centerId != null">
            center_id = #{record.centerId,jdbcType=INTEGER},
          </if>
          <if test="record.creator != null">
            creator = #{record.creator,jdbcType=VARCHAR},
          </if>
          <if test="record.gmtModified != null">
            gmt_modified = #{record.gmtModified,jdbcType=TIMESTAMP},
          </if>
          <if test="record.gmtCreated != null">
            gmt_created = #{record.gmtCreated,jdbcType=TIMESTAMP},
          </if>
          <if test="record.jsonContent != null">
            json_content = #{record.jsonContent,jdbcType=LONGVARCHAR},
          </if>
        </trim>
      </otherwise>
    </choose>
    where id = #{record.id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.copower.pmcc.assess.dal.basis.entity.MdCostConstruction">
    update tb_md_cost_construction
    set parcel_setting_outer = #{parcelSettingOuter,jdbcType=VARCHAR},
      parcel_setting_inner = #{parcelSettingInner,jdbcType=VARCHAR},
      construction_installation_engineering_fee_ids = #{constructionInstallationEngineeringFeeIds,jdbcType=VARCHAR},
      construction_assessment_price_correcting = #{constructionAssessmentPriceCorrecting,jdbcType=DECIMAL},
      construction_assessment_value = #{constructionAssessmentValue,jdbcType=VARCHAR},
      investment_profit = #{investmentProfit,jdbcType=VARCHAR},
      interest_investment = #{interestInvestment,jdbcType=VARCHAR},
      construction_subtotal = #{constructionSubtotal,jdbcType=VARCHAR},
      land_get_cost_total = #{landGetCostTotal,jdbcType=VARCHAR},
      develop_land_area_tax = #{developLandAreaTax,jdbcType=DECIMAL},
      develop_build_area_tax = #{developBuildAreaTax,jdbcType=DECIMAL},
      develop_year_number_tax = #{developYearNumberTax,jdbcType=DECIMAL},
      economic_id = #{economicId,jdbcType=INTEGER},
      base_land_id = #{baseLandId,jdbcType=INTEGER},
      approach_id = #{approachId,jdbcType=INTEGER},
      mc_id = #{mcId,jdbcType=INTEGER},
      land_purchase_price = #{landPurchasePrice,jdbcType=DECIMAL},
      land_purchase_price_explain = #{landPurchasePriceExplain,jdbcType=VARCHAR},
      land_get_relevant = #{landGetRelevant,jdbcType=DECIMAL},
      land_get_relevant_explain = #{landGetRelevantExplain,jdbcType=VARCHAR},
      reconnaissance_design = #{reconnaissanceDesign,jdbcType=DECIMAL},
      construction_installation_engineering_fee = #{constructionInstallationEngineeringFee,jdbcType=DECIMAL},
      infrastructure_cost = #{infrastructureCost,jdbcType=DECIMAL},
      infrastructure_matching_cost = #{infrastructureMatchingCost,jdbcType=DECIMAL},
      infrastructure_matching_cost_explain = #{infrastructureMatchingCostExplain,jdbcType=VARCHAR},
      dev_during = #{devDuring,jdbcType=DECIMAL},
      other_engineering_cost = #{otherEngineeringCost,jdbcType=DECIMAL},
      unforeseen_expenses = #{unforeseenExpenses,jdbcType=DECIMAL},
      unforeseen_expenses_explain = #{unforeseenExpensesExplain,jdbcType=VARCHAR},
      management_expense = #{managementExpense,jdbcType=DECIMAL},
      management_expense_explain = #{managementExpenseExplain,jdbcType=VARCHAR},
      sales_fee = #{salesFee,jdbcType=DECIMAL},
      sales_fee_explain = #{salesFeeExplain,jdbcType=VARCHAR},
      interest_investment_tax = #{interestInvestmentTax,jdbcType=DECIMAL},
      interest_investment_tax_explain = #{interestInvestmentTaxExplain,jdbcType=VARCHAR},
      sales_tax_and_additional = #{salesTaxAndAdditional,jdbcType=DECIMAL},
      sales_tax_and_additional_explain = #{salesTaxAndAdditionalExplain,jdbcType=VARCHAR},
      investment_profit_tax = #{investmentProfitTax,jdbcType=DECIMAL},
      investment_profit_tax_explain = #{investmentProfitTaxExplain,jdbcType=VARCHAR},
      construction_assessment_value2 = #{constructionAssessmentValue2,jdbcType=DECIMAL},
      additional_cost_land_acquisition = #{additionalCostLandAcquisition,jdbcType=DECIMAL},
      infrastructure_cost_explain = #{infrastructureCostExplain,jdbcType=VARCHAR},
      dev_during_explain = #{devDuringExplain,jdbcType=VARCHAR},
      other_engineering_cost_explain = #{otherEngineeringCostExplain,jdbcType=VARCHAR},
      additional_cost_land_acquisition_explain = #{additionalCostLandAcquisitionExplain,jdbcType=VARCHAR},
      reconnaissance_design_explain = #{reconnaissanceDesignExplain,jdbcType=VARCHAR},
      residue_ratio_id = #{residueRatioId,jdbcType=INTEGER},
      residue_ratio_remark = #{residueRatioRemark,jdbcType=VARCHAR},
      residue_ratio = #{residueRatio,jdbcType=DECIMAL},
      pid = #{pid,jdbcType=INTEGER},
      center_id = #{centerId,jdbcType=INTEGER},
      creator = #{creator,jdbcType=VARCHAR},
      gmt_modified = #{gmtModified,jdbcType=TIMESTAMP},
      gmt_created = #{gmtCreated,jdbcType=TIMESTAMP},
      json_content = #{jsonContent,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.copower.pmcc.assess.dal.basis.entity.MdCostConstruction">
    update tb_md_cost_construction
    set parcel_setting_outer = #{parcelSettingOuter,jdbcType=VARCHAR},
      parcel_setting_inner = #{parcelSettingInner,jdbcType=VARCHAR},
      construction_installation_engineering_fee_ids = #{constructionInstallationEngineeringFeeIds,jdbcType=VARCHAR},
      construction_assessment_price_correcting = #{constructionAssessmentPriceCorrecting,jdbcType=DECIMAL},
      construction_assessment_value = #{constructionAssessmentValue,jdbcType=VARCHAR},
      investment_profit = #{investmentProfit,jdbcType=VARCHAR},
      interest_investment = #{interestInvestment,jdbcType=VARCHAR},
      construction_subtotal = #{constructionSubtotal,jdbcType=VARCHAR},
      land_get_cost_total = #{landGetCostTotal,jdbcType=VARCHAR},
      develop_land_area_tax = #{developLandAreaTax,jdbcType=DECIMAL},
      develop_build_area_tax = #{developBuildAreaTax,jdbcType=DECIMAL},
      develop_year_number_tax = #{developYearNumberTax,jdbcType=DECIMAL},
      economic_id = #{economicId,jdbcType=INTEGER},
      base_land_id = #{baseLandId,jdbcType=INTEGER},
      approach_id = #{approachId,jdbcType=INTEGER},
      mc_id = #{mcId,jdbcType=INTEGER},
      land_purchase_price = #{landPurchasePrice,jdbcType=DECIMAL},
      land_purchase_price_explain = #{landPurchasePriceExplain,jdbcType=VARCHAR},
      land_get_relevant = #{landGetRelevant,jdbcType=DECIMAL},
      land_get_relevant_explain = #{landGetRelevantExplain,jdbcType=VARCHAR},
      reconnaissance_design = #{reconnaissanceDesign,jdbcType=DECIMAL},
      construction_installation_engineering_fee = #{constructionInstallationEngineeringFee,jdbcType=DECIMAL},
      infrastructure_cost = #{infrastructureCost,jdbcType=DECIMAL},
      infrastructure_matching_cost = #{infrastructureMatchingCost,jdbcType=DECIMAL},
      infrastructure_matching_cost_explain = #{infrastructureMatchingCostExplain,jdbcType=VARCHAR},
      dev_during = #{devDuring,jdbcType=DECIMAL},
      other_engineering_cost = #{otherEngineeringCost,jdbcType=DECIMAL},
      unforeseen_expenses = #{unforeseenExpenses,jdbcType=DECIMAL},
      unforeseen_expenses_explain = #{unforeseenExpensesExplain,jdbcType=VARCHAR},
      management_expense = #{managementExpense,jdbcType=DECIMAL},
      management_expense_explain = #{managementExpenseExplain,jdbcType=VARCHAR},
      sales_fee = #{salesFee,jdbcType=DECIMAL},
      sales_fee_explain = #{salesFeeExplain,jdbcType=VARCHAR},
      interest_investment_tax = #{interestInvestmentTax,jdbcType=DECIMAL},
      interest_investment_tax_explain = #{interestInvestmentTaxExplain,jdbcType=VARCHAR},
      sales_tax_and_additional = #{salesTaxAndAdditional,jdbcType=DECIMAL},
      sales_tax_and_additional_explain = #{salesTaxAndAdditionalExplain,jdbcType=VARCHAR},
      investment_profit_tax = #{investmentProfitTax,jdbcType=DECIMAL},
      investment_profit_tax_explain = #{investmentProfitTaxExplain,jdbcType=VARCHAR},
      construction_assessment_value2 = #{constructionAssessmentValue2,jdbcType=DECIMAL},
      additional_cost_land_acquisition = #{additionalCostLandAcquisition,jdbcType=DECIMAL},
      infrastructure_cost_explain = #{infrastructureCostExplain,jdbcType=VARCHAR},
      dev_during_explain = #{devDuringExplain,jdbcType=VARCHAR},
      other_engineering_cost_explain = #{otherEngineeringCostExplain,jdbcType=VARCHAR},
      additional_cost_land_acquisition_explain = #{additionalCostLandAcquisitionExplain,jdbcType=VARCHAR},
      reconnaissance_design_explain = #{reconnaissanceDesignExplain,jdbcType=VARCHAR},
      residue_ratio_id = #{residueRatioId,jdbcType=INTEGER},
      residue_ratio_remark = #{residueRatioRemark,jdbcType=VARCHAR},
      residue_ratio = #{residueRatio,jdbcType=DECIMAL},
      pid = #{pid,jdbcType=INTEGER},
      center_id = #{centerId,jdbcType=INTEGER},
      creator = #{creator,jdbcType=VARCHAR},
      gmt_modified = #{gmtModified,jdbcType=TIMESTAMP},
      gmt_created = #{gmtCreated,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <insert id="batchInsert" keyColumn="id" keyProperty="id" parameterType="map" useGeneratedKeys="true">
    insert into tb_md_cost_construction
    (parcel_setting_outer, parcel_setting_inner, construction_installation_engineering_fee_ids, 
      construction_assessment_price_correcting, construction_assessment_value, investment_profit, 
      interest_investment, construction_subtotal, land_get_cost_total, develop_land_area_tax, 
      develop_build_area_tax, develop_year_number_tax, economic_id, base_land_id, approach_id, 
      mc_id, land_purchase_price, land_purchase_price_explain, land_get_relevant, land_get_relevant_explain, 
      reconnaissance_design, construction_installation_engineering_fee, infrastructure_cost, 
      infrastructure_matching_cost, infrastructure_matching_cost_explain, dev_during, 
      other_engineering_cost, unforeseen_expenses, unforeseen_expenses_explain, management_expense, 
      management_expense_explain, sales_fee, sales_fee_explain, interest_investment_tax, 
      interest_investment_tax_explain, sales_tax_and_additional, sales_tax_and_additional_explain, 
      investment_profit_tax, investment_profit_tax_explain, construction_assessment_value2, 
      additional_cost_land_acquisition, infrastructure_cost_explain, dev_during_explain, 
      other_engineering_cost_explain, additional_cost_land_acquisition_explain, reconnaissance_design_explain, 
      residue_ratio_id, residue_ratio_remark, residue_ratio, pid, center_id, creator, 
      gmt_modified, gmt_created, json_content)
    values
    <foreach collection="list" item="item" separator=",">
      (#{item.parcelSettingOuter,jdbcType=VARCHAR}, #{item.parcelSettingInner,jdbcType=VARCHAR}, 
        #{item.constructionInstallationEngineeringFeeIds,jdbcType=VARCHAR}, #{item.constructionAssessmentPriceCorrecting,jdbcType=DECIMAL}, 
        #{item.constructionAssessmentValue,jdbcType=VARCHAR}, #{item.investmentProfit,jdbcType=VARCHAR}, 
        #{item.interestInvestment,jdbcType=VARCHAR}, #{item.constructionSubtotal,jdbcType=VARCHAR}, 
        #{item.landGetCostTotal,jdbcType=VARCHAR}, #{item.developLandAreaTax,jdbcType=DECIMAL}, 
        #{item.developBuildAreaTax,jdbcType=DECIMAL}, #{item.developYearNumberTax,jdbcType=DECIMAL}, 
        #{item.economicId,jdbcType=INTEGER}, #{item.baseLandId,jdbcType=INTEGER}, #{item.approachId,jdbcType=INTEGER}, 
        #{item.mcId,jdbcType=INTEGER}, #{item.landPurchasePrice,jdbcType=DECIMAL}, #{item.landPurchasePriceExplain,jdbcType=VARCHAR}, 
        #{item.landGetRelevant,jdbcType=DECIMAL}, #{item.landGetRelevantExplain,jdbcType=VARCHAR}, 
        #{item.reconnaissanceDesign,jdbcType=DECIMAL}, #{item.constructionInstallationEngineeringFee,jdbcType=DECIMAL}, 
        #{item.infrastructureCost,jdbcType=DECIMAL}, #{item.infrastructureMatchingCost,jdbcType=DECIMAL}, 
        #{item.infrastructureMatchingCostExplain,jdbcType=VARCHAR}, #{item.devDuring,jdbcType=DECIMAL}, 
        #{item.otherEngineeringCost,jdbcType=DECIMAL}, #{item.unforeseenExpenses,jdbcType=DECIMAL}, 
        #{item.unforeseenExpensesExplain,jdbcType=VARCHAR}, #{item.managementExpense,jdbcType=DECIMAL}, 
        #{item.managementExpenseExplain,jdbcType=VARCHAR}, #{item.salesFee,jdbcType=DECIMAL}, 
        #{item.salesFeeExplain,jdbcType=VARCHAR}, #{item.interestInvestmentTax,jdbcType=DECIMAL}, 
        #{item.interestInvestmentTaxExplain,jdbcType=VARCHAR}, #{item.salesTaxAndAdditional,jdbcType=DECIMAL}, 
        #{item.salesTaxAndAdditionalExplain,jdbcType=VARCHAR}, #{item.investmentProfitTax,jdbcType=DECIMAL}, 
        #{item.investmentProfitTaxExplain,jdbcType=VARCHAR}, #{item.constructionAssessmentValue2,jdbcType=DECIMAL}, 
        #{item.additionalCostLandAcquisition,jdbcType=DECIMAL}, #{item.infrastructureCostExplain,jdbcType=VARCHAR}, 
        #{item.devDuringExplain,jdbcType=VARCHAR}, #{item.otherEngineeringCostExplain,jdbcType=VARCHAR}, 
        #{item.additionalCostLandAcquisitionExplain,jdbcType=VARCHAR}, #{item.reconnaissanceDesignExplain,jdbcType=VARCHAR}, 
        #{item.residueRatioId,jdbcType=INTEGER}, #{item.residueRatioRemark,jdbcType=VARCHAR}, 
        #{item.residueRatio,jdbcType=DECIMAL}, #{item.pid,jdbcType=INTEGER}, #{item.centerId,jdbcType=INTEGER}, 
        #{item.creator,jdbcType=VARCHAR}, #{item.gmtModified,jdbcType=TIMESTAMP}, #{item.gmtCreated,jdbcType=TIMESTAMP}, 
        #{item.jsonContent,jdbcType=LONGVARCHAR})
    </foreach>
  </insert>
  <insert id="batchInsertSelective" keyColumn="id" keyProperty="list.id" parameterType="map" useGeneratedKeys="true">
    insert into tb_md_cost_construction (
    <foreach collection="selective" item="column" separator=",">
      ${column.escapedColumnName}
    </foreach>
    )
    values
    <foreach collection="list" item="item" separator=",">
      (
      <foreach collection="selective" item="column" separator=",">
        <if test="'parcel_setting_outer'.toString() == column.value">
          #{item.parcelSettingOuter,jdbcType=VARCHAR}
        </if>
        <if test="'parcel_setting_inner'.toString() == column.value">
          #{item.parcelSettingInner,jdbcType=VARCHAR}
        </if>
        <if test="'construction_installation_engineering_fee_ids'.toString() == column.value">
          #{item.constructionInstallationEngineeringFeeIds,jdbcType=VARCHAR}
        </if>
        <if test="'construction_assessment_price_correcting'.toString() == column.value">
          #{item.constructionAssessmentPriceCorrecting,jdbcType=DECIMAL}
        </if>
        <if test="'construction_assessment_value'.toString() == column.value">
          #{item.constructionAssessmentValue,jdbcType=VARCHAR}
        </if>
        <if test="'investment_profit'.toString() == column.value">
          #{item.investmentProfit,jdbcType=VARCHAR}
        </if>
        <if test="'interest_investment'.toString() == column.value">
          #{item.interestInvestment,jdbcType=VARCHAR}
        </if>
        <if test="'construction_subtotal'.toString() == column.value">
          #{item.constructionSubtotal,jdbcType=VARCHAR}
        </if>
        <if test="'land_get_cost_total'.toString() == column.value">
          #{item.landGetCostTotal,jdbcType=VARCHAR}
        </if>
        <if test="'develop_land_area_tax'.toString() == column.value">
          #{item.developLandAreaTax,jdbcType=DECIMAL}
        </if>
        <if test="'develop_build_area_tax'.toString() == column.value">
          #{item.developBuildAreaTax,jdbcType=DECIMAL}
        </if>
        <if test="'develop_year_number_tax'.toString() == column.value">
          #{item.developYearNumberTax,jdbcType=DECIMAL}
        </if>
        <if test="'economic_id'.toString() == column.value">
          #{item.economicId,jdbcType=INTEGER}
        </if>
        <if test="'base_land_id'.toString() == column.value">
          #{item.baseLandId,jdbcType=INTEGER}
        </if>
        <if test="'approach_id'.toString() == column.value">
          #{item.approachId,jdbcType=INTEGER}
        </if>
        <if test="'mc_id'.toString() == column.value">
          #{item.mcId,jdbcType=INTEGER}
        </if>
        <if test="'land_purchase_price'.toString() == column.value">
          #{item.landPurchasePrice,jdbcType=DECIMAL}
        </if>
        <if test="'land_purchase_price_explain'.toString() == column.value">
          #{item.landPurchasePriceExplain,jdbcType=VARCHAR}
        </if>
        <if test="'land_get_relevant'.toString() == column.value">
          #{item.landGetRelevant,jdbcType=DECIMAL}
        </if>
        <if test="'land_get_relevant_explain'.toString() == column.value">
          #{item.landGetRelevantExplain,jdbcType=VARCHAR}
        </if>
        <if test="'reconnaissance_design'.toString() == column.value">
          #{item.reconnaissanceDesign,jdbcType=DECIMAL}
        </if>
        <if test="'construction_installation_engineering_fee'.toString() == column.value">
          #{item.constructionInstallationEngineeringFee,jdbcType=DECIMAL}
        </if>
        <if test="'infrastructure_cost'.toString() == column.value">
          #{item.infrastructureCost,jdbcType=DECIMAL}
        </if>
        <if test="'infrastructure_matching_cost'.toString() == column.value">
          #{item.infrastructureMatchingCost,jdbcType=DECIMAL}
        </if>
        <if test="'infrastructure_matching_cost_explain'.toString() == column.value">
          #{item.infrastructureMatchingCostExplain,jdbcType=VARCHAR}
        </if>
        <if test="'dev_during'.toString() == column.value">
          #{item.devDuring,jdbcType=DECIMAL}
        </if>
        <if test="'other_engineering_cost'.toString() == column.value">
          #{item.otherEngineeringCost,jdbcType=DECIMAL}
        </if>
        <if test="'unforeseen_expenses'.toString() == column.value">
          #{item.unforeseenExpenses,jdbcType=DECIMAL}
        </if>
        <if test="'unforeseen_expenses_explain'.toString() == column.value">
          #{item.unforeseenExpensesExplain,jdbcType=VARCHAR}
        </if>
        <if test="'management_expense'.toString() == column.value">
          #{item.managementExpense,jdbcType=DECIMAL}
        </if>
        <if test="'management_expense_explain'.toString() == column.value">
          #{item.managementExpenseExplain,jdbcType=VARCHAR}
        </if>
        <if test="'sales_fee'.toString() == column.value">
          #{item.salesFee,jdbcType=DECIMAL}
        </if>
        <if test="'sales_fee_explain'.toString() == column.value">
          #{item.salesFeeExplain,jdbcType=VARCHAR}
        </if>
        <if test="'interest_investment_tax'.toString() == column.value">
          #{item.interestInvestmentTax,jdbcType=DECIMAL}
        </if>
        <if test="'interest_investment_tax_explain'.toString() == column.value">
          #{item.interestInvestmentTaxExplain,jdbcType=VARCHAR}
        </if>
        <if test="'sales_tax_and_additional'.toString() == column.value">
          #{item.salesTaxAndAdditional,jdbcType=DECIMAL}
        </if>
        <if test="'sales_tax_and_additional_explain'.toString() == column.value">
          #{item.salesTaxAndAdditionalExplain,jdbcType=VARCHAR}
        </if>
        <if test="'investment_profit_tax'.toString() == column.value">
          #{item.investmentProfitTax,jdbcType=DECIMAL}
        </if>
        <if test="'investment_profit_tax_explain'.toString() == column.value">
          #{item.investmentProfitTaxExplain,jdbcType=VARCHAR}
        </if>
        <if test="'construction_assessment_value2'.toString() == column.value">
          #{item.constructionAssessmentValue2,jdbcType=DECIMAL}
        </if>
        <if test="'additional_cost_land_acquisition'.toString() == column.value">
          #{item.additionalCostLandAcquisition,jdbcType=DECIMAL}
        </if>
        <if test="'infrastructure_cost_explain'.toString() == column.value">
          #{item.infrastructureCostExplain,jdbcType=VARCHAR}
        </if>
        <if test="'dev_during_explain'.toString() == column.value">
          #{item.devDuringExplain,jdbcType=VARCHAR}
        </if>
        <if test="'other_engineering_cost_explain'.toString() == column.value">
          #{item.otherEngineeringCostExplain,jdbcType=VARCHAR}
        </if>
        <if test="'additional_cost_land_acquisition_explain'.toString() == column.value">
          #{item.additionalCostLandAcquisitionExplain,jdbcType=VARCHAR}
        </if>
        <if test="'reconnaissance_design_explain'.toString() == column.value">
          #{item.reconnaissanceDesignExplain,jdbcType=VARCHAR}
        </if>
        <if test="'residue_ratio_id'.toString() == column.value">
          #{item.residueRatioId,jdbcType=INTEGER}
        </if>
        <if test="'residue_ratio_remark'.toString() == column.value">
          #{item.residueRatioRemark,jdbcType=VARCHAR}
        </if>
        <if test="'residue_ratio'.toString() == column.value">
          #{item.residueRatio,jdbcType=DECIMAL}
        </if>
        <if test="'pid'.toString() == column.value">
          #{item.pid,jdbcType=INTEGER}
        </if>
        <if test="'center_id'.toString() == column.value">
          #{item.centerId,jdbcType=INTEGER}
        </if>
        <if test="'creator'.toString() == column.value">
          #{item.creator,jdbcType=VARCHAR}
        </if>
        <if test="'gmt_modified'.toString() == column.value">
          #{item.gmtModified,jdbcType=TIMESTAMP}
        </if>
        <if test="'gmt_created'.toString() == column.value">
          #{item.gmtCreated,jdbcType=TIMESTAMP}
        </if>
        <if test="'json_content'.toString() == column.value">
          #{item.jsonContent,jdbcType=LONGVARCHAR}
        </if>
      </foreach>
      )
    </foreach>
  </insert>
</mapper>