<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.copower.pmcc.assess.dal.basis.mapper.SchemeJudgeObjectMapper">
  <resultMap id="BaseResultMap" type="com.copower.pmcc.assess.dal.basis.entity.SchemeJudgeObject">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="pid" jdbcType="INTEGER" property="pid" />
    <result column="project_id" jdbcType="INTEGER" property="projectId" />
    <result column="area_group_id" jdbcType="INTEGER" property="areaGroupId" />
    <result column="original_area_group_id" jdbcType="INTEGER" property="originalAreaGroupId" />
    <result column="declare_record_id" jdbcType="INTEGER" property="declareRecordId" />
    <result column="building_status" jdbcType="INTEGER" property="buildingStatus" />
    <result column="basic_apply_id" jdbcType="INTEGER" property="basicApplyId" />
    <result column="number" jdbcType="VARCHAR" property="number" />
    <result column="original_number" jdbcType="VARCHAR" property="originalNumber" />
    <result column="split_number" jdbcType="INTEGER" property="splitNumber" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="cert_name" jdbcType="VARCHAR" property="certName" />
    <result column="ownership" jdbcType="VARCHAR" property="ownership" />
    <result column="seat" jdbcType="VARCHAR" property="seat" />
    <result column="cert_use" jdbcType="VARCHAR" property="certUse" />
    <result column="practical_use" jdbcType="VARCHAR" property="practicalUse" />
    <result column="land_cert_use" jdbcType="VARCHAR" property="landCertUse" />
    <result column="land_practical_use" jdbcType="VARCHAR" property="landPracticalUse" />
    <result column="land_use_end_date" jdbcType="TIMESTAMP" property="landUseEndDate" />
    <result column="land_legal_year" jdbcType="DECIMAL" property="landLegalYear" />
    <result column="land_remaining_year" jdbcType="DECIMAL" property="landRemainingYear" />
    <result column="set_use_classify" jdbcType="INTEGER" property="setUseClassify" />
    <result column="set_use" jdbcType="INTEGER" property="setUse" />
    <result column="best_use" jdbcType="INTEGER" property="bestUse" />
    <result column="floor_area" jdbcType="DECIMAL" property="floorArea" />
    <result column="evaluation_area" jdbcType="DECIMAL" property="evaluationArea" />
    <result column="evaluation_number" jdbcType="DECIMAL" property="evaluationNumber" />
    <result column="evaluation_number_unit" jdbcType="VARCHAR" property="evaluationNumberUnit" />
    <result column="price" jdbcType="DECIMAL" property="price" />
    <result column="factor" jdbcType="VARCHAR" property="factor" />
    <result column="original_price" jdbcType="DECIMAL" property="originalPrice" />
    <result column="set_plot_ratio" jdbcType="DECIMAL" property="setPlotRatio" />
    <result column="plan_plot_ratio" jdbcType="VARCHAR" property="planPlotRatio" />
    <result column="actual_plot_ratio" jdbcType="DECIMAL" property="actualPlotRatio" />
    <result column="standard_judge_id" jdbcType="INTEGER" property="standardJudgeId" />
    <result column="standard_judge_explain" jdbcType="VARCHAR" property="standardJudgeExplain" />
    <result column="judge_function" jdbcType="VARCHAR" property="judgeFunction" />
    <result column="not_applicable_reason" jdbcType="VARCHAR" property="notApplicableReason" />
    <result column="merge_explain" jdbcType="VARCHAR" property="mergeExplain" />
    <result column="split_explain" jdbcType="VARCHAR" property="splitExplain" />
    <result column="split_from" jdbcType="INTEGER" property="splitFrom" />
    <result column="parcel_outer_develop" jdbcType="VARCHAR" property="parcelOuterDevelop" />
    <result column="parcel_inner_develop" jdbcType="VARCHAR" property="parcelInnerDevelop" />
    <result column="parcel_setting_inner_develop" jdbcType="VARCHAR" property="parcelSettingInnerDevelop" />
    <result column="current_situation" jdbcType="VARCHAR" property="currentSituation" />
    <result column="bis_split" jdbcType="BIT" property="bisSplit" />
    <result column="bis_merge" jdbcType="BIT" property="bisMerge" />
    <result column="bis_enable" jdbcType="BIT" property="bisEnable" />
    <result column="bis_set_function" jdbcType="BIT" property="bisSetFunction" />
    <result column="sorting" jdbcType="INTEGER" property="sorting" />
    <result column="creator" jdbcType="VARCHAR" property="creator" />
    <result column="gmt_created" jdbcType="TIMESTAMP" property="gmtCreated" />
    <result column="gmt_modified" jdbcType="TIMESTAMP" property="gmtModified" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, pid, project_id, area_group_id, original_area_group_id, declare_record_id, building_status, 
    basic_apply_id, number, original_number, split_number, name, cert_name, ownership, 
    seat, cert_use, practical_use, land_cert_use, land_practical_use, land_use_end_date, 
    land_legal_year, land_remaining_year, set_use_classify, set_use, best_use, floor_area, 
    evaluation_area, evaluation_number, evaluation_number_unit, price, factor, original_price, 
    set_plot_ratio, plan_plot_ratio, actual_plot_ratio, standard_judge_id, standard_judge_explain, 
    judge_function, not_applicable_reason, merge_explain, split_explain, split_from, 
    parcel_outer_develop, parcel_inner_develop, parcel_setting_inner_develop, current_situation, 
    bis_split, bis_merge, bis_enable, bis_set_function, sorting, creator, gmt_created, 
    gmt_modified
  </sql>
  <select id="selectByExample" parameterType="com.copower.pmcc.assess.dal.basis.entity.SchemeJudgeObjectExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from tb_scheme_judge_object
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from tb_scheme_judge_object
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from tb_scheme_judge_object
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.copower.pmcc.assess.dal.basis.entity.SchemeJudgeObjectExample">
    delete from tb_scheme_judge_object
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.copower.pmcc.assess.dal.basis.entity.SchemeJudgeObject">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into tb_scheme_judge_object (pid, project_id, area_group_id, 
      original_area_group_id, declare_record_id, building_status, 
      basic_apply_id, number, original_number, 
      split_number, name, cert_name, 
      ownership, seat, cert_use, 
      practical_use, land_cert_use, land_practical_use, 
      land_use_end_date, land_legal_year, land_remaining_year, 
      set_use_classify, set_use, best_use, 
      floor_area, evaluation_area, evaluation_number, 
      evaluation_number_unit, price, factor, 
      original_price, set_plot_ratio, plan_plot_ratio, 
      actual_plot_ratio, standard_judge_id, standard_judge_explain, 
      judge_function, not_applicable_reason, merge_explain, 
      split_explain, split_from, parcel_outer_develop, 
      parcel_inner_develop, parcel_setting_inner_develop, 
      current_situation, bis_split, bis_merge, 
      bis_enable, bis_set_function, sorting, 
      creator, gmt_created, gmt_modified
      )
    values (#{pid,jdbcType=INTEGER}, #{projectId,jdbcType=INTEGER}, #{areaGroupId,jdbcType=INTEGER}, 
      #{originalAreaGroupId,jdbcType=INTEGER}, #{declareRecordId,jdbcType=INTEGER}, #{buildingStatus,jdbcType=INTEGER}, 
      #{basicApplyId,jdbcType=INTEGER}, #{number,jdbcType=VARCHAR}, #{originalNumber,jdbcType=VARCHAR}, 
      #{splitNumber,jdbcType=INTEGER}, #{name,jdbcType=VARCHAR}, #{certName,jdbcType=VARCHAR}, 
      #{ownership,jdbcType=VARCHAR}, #{seat,jdbcType=VARCHAR}, #{certUse,jdbcType=VARCHAR}, 
      #{practicalUse,jdbcType=VARCHAR}, #{landCertUse,jdbcType=VARCHAR}, #{landPracticalUse,jdbcType=VARCHAR}, 
      #{landUseEndDate,jdbcType=TIMESTAMP}, #{landLegalYear,jdbcType=DECIMAL}, #{landRemainingYear,jdbcType=DECIMAL}, 
      #{setUseClassify,jdbcType=INTEGER}, #{setUse,jdbcType=INTEGER}, #{bestUse,jdbcType=INTEGER}, 
      #{floorArea,jdbcType=DECIMAL}, #{evaluationArea,jdbcType=DECIMAL}, #{evaluationNumber,jdbcType=DECIMAL}, 
      #{evaluationNumberUnit,jdbcType=VARCHAR}, #{price,jdbcType=DECIMAL}, #{factor,jdbcType=VARCHAR}, 
      #{originalPrice,jdbcType=DECIMAL}, #{setPlotRatio,jdbcType=DECIMAL}, #{planPlotRatio,jdbcType=VARCHAR}, 
      #{actualPlotRatio,jdbcType=DECIMAL}, #{standardJudgeId,jdbcType=INTEGER}, #{standardJudgeExplain,jdbcType=VARCHAR}, 
      #{judgeFunction,jdbcType=VARCHAR}, #{notApplicableReason,jdbcType=VARCHAR}, #{mergeExplain,jdbcType=VARCHAR}, 
      #{splitExplain,jdbcType=VARCHAR}, #{splitFrom,jdbcType=INTEGER}, #{parcelOuterDevelop,jdbcType=VARCHAR}, 
      #{parcelInnerDevelop,jdbcType=VARCHAR}, #{parcelSettingInnerDevelop,jdbcType=VARCHAR}, 
      #{currentSituation,jdbcType=VARCHAR}, #{bisSplit,jdbcType=BIT}, #{bisMerge,jdbcType=BIT}, 
      #{bisEnable,jdbcType=BIT}, #{bisSetFunction,jdbcType=BIT}, #{sorting,jdbcType=INTEGER}, 
      #{creator,jdbcType=VARCHAR}, #{gmtCreated,jdbcType=TIMESTAMP}, #{gmtModified,jdbcType=TIMESTAMP}
      )
  </insert>
  <insert id="insertSelective" parameterType="map">
    <selectKey keyProperty="record.id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into tb_scheme_judge_object
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach close=")" collection="selective" item="column" open="(" separator=",">
          ${column.escapedColumnName}
        </foreach>
      </when>
      <otherwise>
        <trim prefix="(" suffix=")" suffixOverrides=",">
          <if test="record.pid != null">
            pid,
          </if>
          <if test="record.projectId != null">
            project_id,
          </if>
          <if test="record.areaGroupId != null">
            area_group_id,
          </if>
          <if test="record.originalAreaGroupId != null">
            original_area_group_id,
          </if>
          <if test="record.declareRecordId != null">
            declare_record_id,
          </if>
          <if test="record.buildingStatus != null">
            building_status,
          </if>
          <if test="record.basicApplyId != null">
            basic_apply_id,
          </if>
          <if test="record.number != null">
            number,
          </if>
          <if test="record.originalNumber != null">
            original_number,
          </if>
          <if test="record.splitNumber != null">
            split_number,
          </if>
          <if test="record.name != null">
            name,
          </if>
          <if test="record.certName != null">
            cert_name,
          </if>
          <if test="record.ownership != null">
            ownership,
          </if>
          <if test="record.seat != null">
            seat,
          </if>
          <if test="record.certUse != null">
            cert_use,
          </if>
          <if test="record.practicalUse != null">
            practical_use,
          </if>
          <if test="record.landCertUse != null">
            land_cert_use,
          </if>
          <if test="record.landPracticalUse != null">
            land_practical_use,
          </if>
          <if test="record.landUseEndDate != null">
            land_use_end_date,
          </if>
          <if test="record.landLegalYear != null">
            land_legal_year,
          </if>
          <if test="record.landRemainingYear != null">
            land_remaining_year,
          </if>
          <if test="record.setUseClassify != null">
            set_use_classify,
          </if>
          <if test="record.setUse != null">
            set_use,
          </if>
          <if test="record.bestUse != null">
            best_use,
          </if>
          <if test="record.floorArea != null">
            floor_area,
          </if>
          <if test="record.evaluationArea != null">
            evaluation_area,
          </if>
          <if test="record.evaluationNumber != null">
            evaluation_number,
          </if>
          <if test="record.evaluationNumberUnit != null">
            evaluation_number_unit,
          </if>
          <if test="record.price != null">
            price,
          </if>
          <if test="record.factor != null">
            factor,
          </if>
          <if test="record.originalPrice != null">
            original_price,
          </if>
          <if test="record.setPlotRatio != null">
            set_plot_ratio,
          </if>
          <if test="record.planPlotRatio != null">
            plan_plot_ratio,
          </if>
          <if test="record.actualPlotRatio != null">
            actual_plot_ratio,
          </if>
          <if test="record.standardJudgeId != null">
            standard_judge_id,
          </if>
          <if test="record.standardJudgeExplain != null">
            standard_judge_explain,
          </if>
          <if test="record.judgeFunction != null">
            judge_function,
          </if>
          <if test="record.notApplicableReason != null">
            not_applicable_reason,
          </if>
          <if test="record.mergeExplain != null">
            merge_explain,
          </if>
          <if test="record.splitExplain != null">
            split_explain,
          </if>
          <if test="record.splitFrom != null">
            split_from,
          </if>
          <if test="record.parcelOuterDevelop != null">
            parcel_outer_develop,
          </if>
          <if test="record.parcelInnerDevelop != null">
            parcel_inner_develop,
          </if>
          <if test="record.parcelSettingInnerDevelop != null">
            parcel_setting_inner_develop,
          </if>
          <if test="record.currentSituation != null">
            current_situation,
          </if>
          <if test="record.bisSplit != null">
            bis_split,
          </if>
          <if test="record.bisMerge != null">
            bis_merge,
          </if>
          <if test="record.bisEnable != null">
            bis_enable,
          </if>
          <if test="record.bisSetFunction != null">
            bis_set_function,
          </if>
          <if test="record.sorting != null">
            sorting,
          </if>
          <if test="record.creator != null">
            creator,
          </if>
          <if test="record.gmtCreated != null">
            gmt_created,
          </if>
          <if test="record.gmtModified != null">
            gmt_modified,
          </if>
        </trim>
        <trim prefix="(" suffix=")" suffixOverrides="," />
      </otherwise>
    </choose>
    values
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach close=")" collection="selective" item="column" open="(" separator=",">
          #{record.${column.javaProperty},jdbcType=${column.jdbcType}}
        </foreach>
      </when>
      <otherwise>
        <trim prefix="(" suffix=")" suffixOverrides=",">
          <if test="record.pid != null">
            #{record.pid,jdbcType=INTEGER},
          </if>
          <if test="record.projectId != null">
            #{record.projectId,jdbcType=INTEGER},
          </if>
          <if test="record.areaGroupId != null">
            #{record.areaGroupId,jdbcType=INTEGER},
          </if>
          <if test="record.originalAreaGroupId != null">
            #{record.originalAreaGroupId,jdbcType=INTEGER},
          </if>
          <if test="record.declareRecordId != null">
            #{record.declareRecordId,jdbcType=INTEGER},
          </if>
          <if test="record.buildingStatus != null">
            #{record.buildingStatus,jdbcType=INTEGER},
          </if>
          <if test="record.basicApplyId != null">
            #{record.basicApplyId,jdbcType=INTEGER},
          </if>
          <if test="record.number != null">
            #{record.number,jdbcType=VARCHAR},
          </if>
          <if test="record.originalNumber != null">
            #{record.originalNumber,jdbcType=VARCHAR},
          </if>
          <if test="record.splitNumber != null">
            #{record.splitNumber,jdbcType=INTEGER},
          </if>
          <if test="record.name != null">
            #{record.name,jdbcType=VARCHAR},
          </if>
          <if test="record.certName != null">
            #{record.certName,jdbcType=VARCHAR},
          </if>
          <if test="record.ownership != null">
            #{record.ownership,jdbcType=VARCHAR},
          </if>
          <if test="record.seat != null">
            #{record.seat,jdbcType=VARCHAR},
          </if>
          <if test="record.certUse != null">
            #{record.certUse,jdbcType=VARCHAR},
          </if>
          <if test="record.practicalUse != null">
            #{record.practicalUse,jdbcType=VARCHAR},
          </if>
          <if test="record.landCertUse != null">
            #{record.landCertUse,jdbcType=VARCHAR},
          </if>
          <if test="record.landPracticalUse != null">
            #{record.landPracticalUse,jdbcType=VARCHAR},
          </if>
          <if test="record.landUseEndDate != null">
            #{record.landUseEndDate,jdbcType=TIMESTAMP},
          </if>
          <if test="record.landLegalYear != null">
            #{record.landLegalYear,jdbcType=DECIMAL},
          </if>
          <if test="record.landRemainingYear != null">
            #{record.landRemainingYear,jdbcType=DECIMAL},
          </if>
          <if test="record.setUseClassify != null">
            #{record.setUseClassify,jdbcType=INTEGER},
          </if>
          <if test="record.setUse != null">
            #{record.setUse,jdbcType=INTEGER},
          </if>
          <if test="record.bestUse != null">
            #{record.bestUse,jdbcType=INTEGER},
          </if>
          <if test="record.floorArea != null">
            #{record.floorArea,jdbcType=DECIMAL},
          </if>
          <if test="record.evaluationArea != null">
            #{record.evaluationArea,jdbcType=DECIMAL},
          </if>
          <if test="record.evaluationNumber != null">
            #{record.evaluationNumber,jdbcType=DECIMAL},
          </if>
          <if test="record.evaluationNumberUnit != null">
            #{record.evaluationNumberUnit,jdbcType=VARCHAR},
          </if>
          <if test="record.price != null">
            #{record.price,jdbcType=DECIMAL},
          </if>
          <if test="record.factor != null">
            #{record.factor,jdbcType=VARCHAR},
          </if>
          <if test="record.originalPrice != null">
            #{record.originalPrice,jdbcType=DECIMAL},
          </if>
          <if test="record.setPlotRatio != null">
            #{record.setPlotRatio,jdbcType=DECIMAL},
          </if>
          <if test="record.planPlotRatio != null">
            #{record.planPlotRatio,jdbcType=VARCHAR},
          </if>
          <if test="record.actualPlotRatio != null">
            #{record.actualPlotRatio,jdbcType=DECIMAL},
          </if>
          <if test="record.standardJudgeId != null">
            #{record.standardJudgeId,jdbcType=INTEGER},
          </if>
          <if test="record.standardJudgeExplain != null">
            #{record.standardJudgeExplain,jdbcType=VARCHAR},
          </if>
          <if test="record.judgeFunction != null">
            #{record.judgeFunction,jdbcType=VARCHAR},
          </if>
          <if test="record.notApplicableReason != null">
            #{record.notApplicableReason,jdbcType=VARCHAR},
          </if>
          <if test="record.mergeExplain != null">
            #{record.mergeExplain,jdbcType=VARCHAR},
          </if>
          <if test="record.splitExplain != null">
            #{record.splitExplain,jdbcType=VARCHAR},
          </if>
          <if test="record.splitFrom != null">
            #{record.splitFrom,jdbcType=INTEGER},
          </if>
          <if test="record.parcelOuterDevelop != null">
            #{record.parcelOuterDevelop,jdbcType=VARCHAR},
          </if>
          <if test="record.parcelInnerDevelop != null">
            #{record.parcelInnerDevelop,jdbcType=VARCHAR},
          </if>
          <if test="record.parcelSettingInnerDevelop != null">
            #{record.parcelSettingInnerDevelop,jdbcType=VARCHAR},
          </if>
          <if test="record.currentSituation != null">
            #{record.currentSituation,jdbcType=VARCHAR},
          </if>
          <if test="record.bisSplit != null">
            #{record.bisSplit,jdbcType=BIT},
          </if>
          <if test="record.bisMerge != null">
            #{record.bisMerge,jdbcType=BIT},
          </if>
          <if test="record.bisEnable != null">
            #{record.bisEnable,jdbcType=BIT},
          </if>
          <if test="record.bisSetFunction != null">
            #{record.bisSetFunction,jdbcType=BIT},
          </if>
          <if test="record.sorting != null">
            #{record.sorting,jdbcType=INTEGER},
          </if>
          <if test="record.creator != null">
            #{record.creator,jdbcType=VARCHAR},
          </if>
          <if test="record.gmtCreated != null">
            #{record.gmtCreated,jdbcType=TIMESTAMP},
          </if>
          <if test="record.gmtModified != null">
            #{record.gmtModified,jdbcType=TIMESTAMP},
          </if>
        </trim>
      </otherwise>
    </choose>
  </insert>
  <select id="countByExample" parameterType="com.copower.pmcc.assess.dal.basis.entity.SchemeJudgeObjectExample" resultType="java.lang.Long">
    select count(*) from tb_scheme_judge_object
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update tb_scheme_judge_object
    SET
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.escapedColumnName} = #{record.${column.javaProperty},jdbcType=${column.jdbcType}}
        </foreach>
      </when>
      <otherwise>
        <trim suffixOverrides=",">
          <if test="record.id != null">
            id = #{record.id,jdbcType=INTEGER},
          </if>
          <if test="record.pid != null">
            pid = #{record.pid,jdbcType=INTEGER},
          </if>
          <if test="record.projectId != null">
            project_id = #{record.projectId,jdbcType=INTEGER},
          </if>
          <if test="record.areaGroupId != null">
            area_group_id = #{record.areaGroupId,jdbcType=INTEGER},
          </if>
          <if test="record.originalAreaGroupId != null">
            original_area_group_id = #{record.originalAreaGroupId,jdbcType=INTEGER},
          </if>
          <if test="record.declareRecordId != null">
            declare_record_id = #{record.declareRecordId,jdbcType=INTEGER},
          </if>
          <if test="record.buildingStatus != null">
            building_status = #{record.buildingStatus,jdbcType=INTEGER},
          </if>
          <if test="record.basicApplyId != null">
            basic_apply_id = #{record.basicApplyId,jdbcType=INTEGER},
          </if>
          <if test="record.number != null">
            number = #{record.number,jdbcType=VARCHAR},
          </if>
          <if test="record.originalNumber != null">
            original_number = #{record.originalNumber,jdbcType=VARCHAR},
          </if>
          <if test="record.splitNumber != null">
            split_number = #{record.splitNumber,jdbcType=INTEGER},
          </if>
          <if test="record.name != null">
            name = #{record.name,jdbcType=VARCHAR},
          </if>
          <if test="record.certName != null">
            cert_name = #{record.certName,jdbcType=VARCHAR},
          </if>
          <if test="record.ownership != null">
            ownership = #{record.ownership,jdbcType=VARCHAR},
          </if>
          <if test="record.seat != null">
            seat = #{record.seat,jdbcType=VARCHAR},
          </if>
          <if test="record.certUse != null">
            cert_use = #{record.certUse,jdbcType=VARCHAR},
          </if>
          <if test="record.practicalUse != null">
            practical_use = #{record.practicalUse,jdbcType=VARCHAR},
          </if>
          <if test="record.landCertUse != null">
            land_cert_use = #{record.landCertUse,jdbcType=VARCHAR},
          </if>
          <if test="record.landPracticalUse != null">
            land_practical_use = #{record.landPracticalUse,jdbcType=VARCHAR},
          </if>
          <if test="record.landUseEndDate != null">
            land_use_end_date = #{record.landUseEndDate,jdbcType=TIMESTAMP},
          </if>
          <if test="record.landLegalYear != null">
            land_legal_year = #{record.landLegalYear,jdbcType=DECIMAL},
          </if>
          <if test="record.landRemainingYear != null">
            land_remaining_year = #{record.landRemainingYear,jdbcType=DECIMAL},
          </if>
          <if test="record.setUseClassify != null">
            set_use_classify = #{record.setUseClassify,jdbcType=INTEGER},
          </if>
          <if test="record.setUse != null">
            set_use = #{record.setUse,jdbcType=INTEGER},
          </if>
          <if test="record.bestUse != null">
            best_use = #{record.bestUse,jdbcType=INTEGER},
          </if>
          <if test="record.floorArea != null">
            floor_area = #{record.floorArea,jdbcType=DECIMAL},
          </if>
          <if test="record.evaluationArea != null">
            evaluation_area = #{record.evaluationArea,jdbcType=DECIMAL},
          </if>
          <if test="record.evaluationNumber != null">
            evaluation_number = #{record.evaluationNumber,jdbcType=DECIMAL},
          </if>
          <if test="record.evaluationNumberUnit != null">
            evaluation_number_unit = #{record.evaluationNumberUnit,jdbcType=VARCHAR},
          </if>
          <if test="record.price != null">
            price = #{record.price,jdbcType=DECIMAL},
          </if>
          <if test="record.factor != null">
            factor = #{record.factor,jdbcType=VARCHAR},
          </if>
          <if test="record.originalPrice != null">
            original_price = #{record.originalPrice,jdbcType=DECIMAL},
          </if>
          <if test="record.setPlotRatio != null">
            set_plot_ratio = #{record.setPlotRatio,jdbcType=DECIMAL},
          </if>
          <if test="record.planPlotRatio != null">
            plan_plot_ratio = #{record.planPlotRatio,jdbcType=VARCHAR},
          </if>
          <if test="record.actualPlotRatio != null">
            actual_plot_ratio = #{record.actualPlotRatio,jdbcType=DECIMAL},
          </if>
          <if test="record.standardJudgeId != null">
            standard_judge_id = #{record.standardJudgeId,jdbcType=INTEGER},
          </if>
          <if test="record.standardJudgeExplain != null">
            standard_judge_explain = #{record.standardJudgeExplain,jdbcType=VARCHAR},
          </if>
          <if test="record.judgeFunction != null">
            judge_function = #{record.judgeFunction,jdbcType=VARCHAR},
          </if>
          <if test="record.notApplicableReason != null">
            not_applicable_reason = #{record.notApplicableReason,jdbcType=VARCHAR},
          </if>
          <if test="record.mergeExplain != null">
            merge_explain = #{record.mergeExplain,jdbcType=VARCHAR},
          </if>
          <if test="record.splitExplain != null">
            split_explain = #{record.splitExplain,jdbcType=VARCHAR},
          </if>
          <if test="record.splitFrom != null">
            split_from = #{record.splitFrom,jdbcType=INTEGER},
          </if>
          <if test="record.parcelOuterDevelop != null">
            parcel_outer_develop = #{record.parcelOuterDevelop,jdbcType=VARCHAR},
          </if>
          <if test="record.parcelInnerDevelop != null">
            parcel_inner_develop = #{record.parcelInnerDevelop,jdbcType=VARCHAR},
          </if>
          <if test="record.parcelSettingInnerDevelop != null">
            parcel_setting_inner_develop = #{record.parcelSettingInnerDevelop,jdbcType=VARCHAR},
          </if>
          <if test="record.currentSituation != null">
            current_situation = #{record.currentSituation,jdbcType=VARCHAR},
          </if>
          <if test="record.bisSplit != null">
            bis_split = #{record.bisSplit,jdbcType=BIT},
          </if>
          <if test="record.bisMerge != null">
            bis_merge = #{record.bisMerge,jdbcType=BIT},
          </if>
          <if test="record.bisEnable != null">
            bis_enable = #{record.bisEnable,jdbcType=BIT},
          </if>
          <if test="record.bisSetFunction != null">
            bis_set_function = #{record.bisSetFunction,jdbcType=BIT},
          </if>
          <if test="record.sorting != null">
            sorting = #{record.sorting,jdbcType=INTEGER},
          </if>
          <if test="record.creator != null">
            creator = #{record.creator,jdbcType=VARCHAR},
          </if>
          <if test="record.gmtCreated != null">
            gmt_created = #{record.gmtCreated,jdbcType=TIMESTAMP},
          </if>
          <if test="record.gmtModified != null">
            gmt_modified = #{record.gmtModified,jdbcType=TIMESTAMP},
          </if>
        </trim>
      </otherwise>
    </choose>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update tb_scheme_judge_object
    set id = #{record.id,jdbcType=INTEGER},
      pid = #{record.pid,jdbcType=INTEGER},
      project_id = #{record.projectId,jdbcType=INTEGER},
      area_group_id = #{record.areaGroupId,jdbcType=INTEGER},
      original_area_group_id = #{record.originalAreaGroupId,jdbcType=INTEGER},
      declare_record_id = #{record.declareRecordId,jdbcType=INTEGER},
      building_status = #{record.buildingStatus,jdbcType=INTEGER},
      basic_apply_id = #{record.basicApplyId,jdbcType=INTEGER},
      number = #{record.number,jdbcType=VARCHAR},
      original_number = #{record.originalNumber,jdbcType=VARCHAR},
      split_number = #{record.splitNumber,jdbcType=INTEGER},
      name = #{record.name,jdbcType=VARCHAR},
      cert_name = #{record.certName,jdbcType=VARCHAR},
      ownership = #{record.ownership,jdbcType=VARCHAR},
      seat = #{record.seat,jdbcType=VARCHAR},
      cert_use = #{record.certUse,jdbcType=VARCHAR},
      practical_use = #{record.practicalUse,jdbcType=VARCHAR},
      land_cert_use = #{record.landCertUse,jdbcType=VARCHAR},
      land_practical_use = #{record.landPracticalUse,jdbcType=VARCHAR},
      land_use_end_date = #{record.landUseEndDate,jdbcType=TIMESTAMP},
      land_legal_year = #{record.landLegalYear,jdbcType=DECIMAL},
      land_remaining_year = #{record.landRemainingYear,jdbcType=DECIMAL},
      set_use_classify = #{record.setUseClassify,jdbcType=INTEGER},
      set_use = #{record.setUse,jdbcType=INTEGER},
      best_use = #{record.bestUse,jdbcType=INTEGER},
      floor_area = #{record.floorArea,jdbcType=DECIMAL},
      evaluation_area = #{record.evaluationArea,jdbcType=DECIMAL},
      evaluation_number = #{record.evaluationNumber,jdbcType=DECIMAL},
      evaluation_number_unit = #{record.evaluationNumberUnit,jdbcType=VARCHAR},
      price = #{record.price,jdbcType=DECIMAL},
      factor = #{record.factor,jdbcType=VARCHAR},
      original_price = #{record.originalPrice,jdbcType=DECIMAL},
      set_plot_ratio = #{record.setPlotRatio,jdbcType=DECIMAL},
      plan_plot_ratio = #{record.planPlotRatio,jdbcType=VARCHAR},
      actual_plot_ratio = #{record.actualPlotRatio,jdbcType=DECIMAL},
      standard_judge_id = #{record.standardJudgeId,jdbcType=INTEGER},
      standard_judge_explain = #{record.standardJudgeExplain,jdbcType=VARCHAR},
      judge_function = #{record.judgeFunction,jdbcType=VARCHAR},
      not_applicable_reason = #{record.notApplicableReason,jdbcType=VARCHAR},
      merge_explain = #{record.mergeExplain,jdbcType=VARCHAR},
      split_explain = #{record.splitExplain,jdbcType=VARCHAR},
      split_from = #{record.splitFrom,jdbcType=INTEGER},
      parcel_outer_develop = #{record.parcelOuterDevelop,jdbcType=VARCHAR},
      parcel_inner_develop = #{record.parcelInnerDevelop,jdbcType=VARCHAR},
      parcel_setting_inner_develop = #{record.parcelSettingInnerDevelop,jdbcType=VARCHAR},
      current_situation = #{record.currentSituation,jdbcType=VARCHAR},
      bis_split = #{record.bisSplit,jdbcType=BIT},
      bis_merge = #{record.bisMerge,jdbcType=BIT},
      bis_enable = #{record.bisEnable,jdbcType=BIT},
      bis_set_function = #{record.bisSetFunction,jdbcType=BIT},
      sorting = #{record.sorting,jdbcType=INTEGER},
      creator = #{record.creator,jdbcType=VARCHAR},
      gmt_created = #{record.gmtCreated,jdbcType=TIMESTAMP},
      gmt_modified = #{record.gmtModified,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="map">
    update tb_scheme_judge_object
    SET
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.escapedColumnName} = #{record.${column.javaProperty},jdbcType=${column.jdbcType}}
        </foreach>
      </when>
      <otherwise>
        <trim suffixOverrides=",">
          <if test="record.pid != null">
            pid = #{record.pid,jdbcType=INTEGER},
          </if>
          <if test="record.projectId != null">
            project_id = #{record.projectId,jdbcType=INTEGER},
          </if>
          <if test="record.areaGroupId != null">
            area_group_id = #{record.areaGroupId,jdbcType=INTEGER},
          </if>
          <if test="record.originalAreaGroupId != null">
            original_area_group_id = #{record.originalAreaGroupId,jdbcType=INTEGER},
          </if>
          <if test="record.declareRecordId != null">
            declare_record_id = #{record.declareRecordId,jdbcType=INTEGER},
          </if>
          <if test="record.buildingStatus != null">
            building_status = #{record.buildingStatus,jdbcType=INTEGER},
          </if>
          <if test="record.basicApplyId != null">
            basic_apply_id = #{record.basicApplyId,jdbcType=INTEGER},
          </if>
          <if test="record.number != null">
            number = #{record.number,jdbcType=VARCHAR},
          </if>
          <if test="record.originalNumber != null">
            original_number = #{record.originalNumber,jdbcType=VARCHAR},
          </if>
          <if test="record.splitNumber != null">
            split_number = #{record.splitNumber,jdbcType=INTEGER},
          </if>
          <if test="record.name != null">
            name = #{record.name,jdbcType=VARCHAR},
          </if>
          <if test="record.certName != null">
            cert_name = #{record.certName,jdbcType=VARCHAR},
          </if>
          <if test="record.ownership != null">
            ownership = #{record.ownership,jdbcType=VARCHAR},
          </if>
          <if test="record.seat != null">
            seat = #{record.seat,jdbcType=VARCHAR},
          </if>
          <if test="record.certUse != null">
            cert_use = #{record.certUse,jdbcType=VARCHAR},
          </if>
          <if test="record.practicalUse != null">
            practical_use = #{record.practicalUse,jdbcType=VARCHAR},
          </if>
          <if test="record.landCertUse != null">
            land_cert_use = #{record.landCertUse,jdbcType=VARCHAR},
          </if>
          <if test="record.landPracticalUse != null">
            land_practical_use = #{record.landPracticalUse,jdbcType=VARCHAR},
          </if>
          <if test="record.landUseEndDate != null">
            land_use_end_date = #{record.landUseEndDate,jdbcType=TIMESTAMP},
          </if>
          <if test="record.landLegalYear != null">
            land_legal_year = #{record.landLegalYear,jdbcType=DECIMAL},
          </if>
          <if test="record.landRemainingYear != null">
            land_remaining_year = #{record.landRemainingYear,jdbcType=DECIMAL},
          </if>
          <if test="record.setUseClassify != null">
            set_use_classify = #{record.setUseClassify,jdbcType=INTEGER},
          </if>
          <if test="record.setUse != null">
            set_use = #{record.setUse,jdbcType=INTEGER},
          </if>
          <if test="record.bestUse != null">
            best_use = #{record.bestUse,jdbcType=INTEGER},
          </if>
          <if test="record.floorArea != null">
            floor_area = #{record.floorArea,jdbcType=DECIMAL},
          </if>
          <if test="record.evaluationArea != null">
            evaluation_area = #{record.evaluationArea,jdbcType=DECIMAL},
          </if>
          <if test="record.evaluationNumber != null">
            evaluation_number = #{record.evaluationNumber,jdbcType=DECIMAL},
          </if>
          <if test="record.evaluationNumberUnit != null">
            evaluation_number_unit = #{record.evaluationNumberUnit,jdbcType=VARCHAR},
          </if>
          <if test="record.price != null">
            price = #{record.price,jdbcType=DECIMAL},
          </if>
          <if test="record.factor != null">
            factor = #{record.factor,jdbcType=VARCHAR},
          </if>
          <if test="record.originalPrice != null">
            original_price = #{record.originalPrice,jdbcType=DECIMAL},
          </if>
          <if test="record.setPlotRatio != null">
            set_plot_ratio = #{record.setPlotRatio,jdbcType=DECIMAL},
          </if>
          <if test="record.planPlotRatio != null">
            plan_plot_ratio = #{record.planPlotRatio,jdbcType=VARCHAR},
          </if>
          <if test="record.actualPlotRatio != null">
            actual_plot_ratio = #{record.actualPlotRatio,jdbcType=DECIMAL},
          </if>
          <if test="record.standardJudgeId != null">
            standard_judge_id = #{record.standardJudgeId,jdbcType=INTEGER},
          </if>
          <if test="record.standardJudgeExplain != null">
            standard_judge_explain = #{record.standardJudgeExplain,jdbcType=VARCHAR},
          </if>
          <if test="record.judgeFunction != null">
            judge_function = #{record.judgeFunction,jdbcType=VARCHAR},
          </if>
          <if test="record.notApplicableReason != null">
            not_applicable_reason = #{record.notApplicableReason,jdbcType=VARCHAR},
          </if>
          <if test="record.mergeExplain != null">
            merge_explain = #{record.mergeExplain,jdbcType=VARCHAR},
          </if>
          <if test="record.splitExplain != null">
            split_explain = #{record.splitExplain,jdbcType=VARCHAR},
          </if>
          <if test="record.splitFrom != null">
            split_from = #{record.splitFrom,jdbcType=INTEGER},
          </if>
          <if test="record.parcelOuterDevelop != null">
            parcel_outer_develop = #{record.parcelOuterDevelop,jdbcType=VARCHAR},
          </if>
          <if test="record.parcelInnerDevelop != null">
            parcel_inner_develop = #{record.parcelInnerDevelop,jdbcType=VARCHAR},
          </if>
          <if test="record.parcelSettingInnerDevelop != null">
            parcel_setting_inner_develop = #{record.parcelSettingInnerDevelop,jdbcType=VARCHAR},
          </if>
          <if test="record.currentSituation != null">
            current_situation = #{record.currentSituation,jdbcType=VARCHAR},
          </if>
          <if test="record.bisSplit != null">
            bis_split = #{record.bisSplit,jdbcType=BIT},
          </if>
          <if test="record.bisMerge != null">
            bis_merge = #{record.bisMerge,jdbcType=BIT},
          </if>
          <if test="record.bisEnable != null">
            bis_enable = #{record.bisEnable,jdbcType=BIT},
          </if>
          <if test="record.bisSetFunction != null">
            bis_set_function = #{record.bisSetFunction,jdbcType=BIT},
          </if>
          <if test="record.sorting != null">
            sorting = #{record.sorting,jdbcType=INTEGER},
          </if>
          <if test="record.creator != null">
            creator = #{record.creator,jdbcType=VARCHAR},
          </if>
          <if test="record.gmtCreated != null">
            gmt_created = #{record.gmtCreated,jdbcType=TIMESTAMP},
          </if>
          <if test="record.gmtModified != null">
            gmt_modified = #{record.gmtModified,jdbcType=TIMESTAMP},
          </if>
        </trim>
      </otherwise>
    </choose>
    where id = #{record.id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.copower.pmcc.assess.dal.basis.entity.SchemeJudgeObject">
    update tb_scheme_judge_object
    set pid = #{pid,jdbcType=INTEGER},
      project_id = #{projectId,jdbcType=INTEGER},
      area_group_id = #{areaGroupId,jdbcType=INTEGER},
      original_area_group_id = #{originalAreaGroupId,jdbcType=INTEGER},
      declare_record_id = #{declareRecordId,jdbcType=INTEGER},
      building_status = #{buildingStatus,jdbcType=INTEGER},
      basic_apply_id = #{basicApplyId,jdbcType=INTEGER},
      number = #{number,jdbcType=VARCHAR},
      original_number = #{originalNumber,jdbcType=VARCHAR},
      split_number = #{splitNumber,jdbcType=INTEGER},
      name = #{name,jdbcType=VARCHAR},
      cert_name = #{certName,jdbcType=VARCHAR},
      ownership = #{ownership,jdbcType=VARCHAR},
      seat = #{seat,jdbcType=VARCHAR},
      cert_use = #{certUse,jdbcType=VARCHAR},
      practical_use = #{practicalUse,jdbcType=VARCHAR},
      land_cert_use = #{landCertUse,jdbcType=VARCHAR},
      land_practical_use = #{landPracticalUse,jdbcType=VARCHAR},
      land_use_end_date = #{landUseEndDate,jdbcType=TIMESTAMP},
      land_legal_year = #{landLegalYear,jdbcType=DECIMAL},
      land_remaining_year = #{landRemainingYear,jdbcType=DECIMAL},
      set_use_classify = #{setUseClassify,jdbcType=INTEGER},
      set_use = #{setUse,jdbcType=INTEGER},
      best_use = #{bestUse,jdbcType=INTEGER},
      floor_area = #{floorArea,jdbcType=DECIMAL},
      evaluation_area = #{evaluationArea,jdbcType=DECIMAL},
      evaluation_number = #{evaluationNumber,jdbcType=DECIMAL},
      evaluation_number_unit = #{evaluationNumberUnit,jdbcType=VARCHAR},
      price = #{price,jdbcType=DECIMAL},
      factor = #{factor,jdbcType=VARCHAR},
      original_price = #{originalPrice,jdbcType=DECIMAL},
      set_plot_ratio = #{setPlotRatio,jdbcType=DECIMAL},
      plan_plot_ratio = #{planPlotRatio,jdbcType=VARCHAR},
      actual_plot_ratio = #{actualPlotRatio,jdbcType=DECIMAL},
      standard_judge_id = #{standardJudgeId,jdbcType=INTEGER},
      standard_judge_explain = #{standardJudgeExplain,jdbcType=VARCHAR},
      judge_function = #{judgeFunction,jdbcType=VARCHAR},
      not_applicable_reason = #{notApplicableReason,jdbcType=VARCHAR},
      merge_explain = #{mergeExplain,jdbcType=VARCHAR},
      split_explain = #{splitExplain,jdbcType=VARCHAR},
      split_from = #{splitFrom,jdbcType=INTEGER},
      parcel_outer_develop = #{parcelOuterDevelop,jdbcType=VARCHAR},
      parcel_inner_develop = #{parcelInnerDevelop,jdbcType=VARCHAR},
      parcel_setting_inner_develop = #{parcelSettingInnerDevelop,jdbcType=VARCHAR},
      current_situation = #{currentSituation,jdbcType=VARCHAR},
      bis_split = #{bisSplit,jdbcType=BIT},
      bis_merge = #{bisMerge,jdbcType=BIT},
      bis_enable = #{bisEnable,jdbcType=BIT},
      bis_set_function = #{bisSetFunction,jdbcType=BIT},
      sorting = #{sorting,jdbcType=INTEGER},
      creator = #{creator,jdbcType=VARCHAR},
      gmt_created = #{gmtCreated,jdbcType=TIMESTAMP},
      gmt_modified = #{gmtModified,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <insert id="batchInsert" keyColumn="id" keyProperty="id" parameterType="map" useGeneratedKeys="true">
    insert into tb_scheme_judge_object
    (pid, project_id, area_group_id, original_area_group_id, declare_record_id, building_status, 
      basic_apply_id, number, original_number, split_number, name, cert_name, ownership, 
      seat, cert_use, practical_use, land_cert_use, land_practical_use, land_use_end_date, 
      land_legal_year, land_remaining_year, set_use_classify, set_use, best_use, floor_area, 
      evaluation_area, evaluation_number, evaluation_number_unit, price, factor, original_price, 
      set_plot_ratio, plan_plot_ratio, actual_plot_ratio, standard_judge_id, standard_judge_explain, 
      judge_function, not_applicable_reason, merge_explain, split_explain, split_from, 
      parcel_outer_develop, parcel_inner_develop, parcel_setting_inner_develop, current_situation, 
      bis_split, bis_merge, bis_enable, bis_set_function, sorting, creator, gmt_created, 
      gmt_modified)
    values
    <foreach collection="list" item="item" separator=",">
      (#{item.pid,jdbcType=INTEGER}, #{item.projectId,jdbcType=INTEGER}, #{item.areaGroupId,jdbcType=INTEGER}, 
        #{item.originalAreaGroupId,jdbcType=INTEGER}, #{item.declareRecordId,jdbcType=INTEGER}, 
        #{item.buildingStatus,jdbcType=INTEGER}, #{item.basicApplyId,jdbcType=INTEGER}, 
        #{item.number,jdbcType=VARCHAR}, #{item.originalNumber,jdbcType=VARCHAR}, #{item.splitNumber,jdbcType=INTEGER}, 
        #{item.name,jdbcType=VARCHAR}, #{item.certName,jdbcType=VARCHAR}, #{item.ownership,jdbcType=VARCHAR}, 
        #{item.seat,jdbcType=VARCHAR}, #{item.certUse,jdbcType=VARCHAR}, #{item.practicalUse,jdbcType=VARCHAR}, 
        #{item.landCertUse,jdbcType=VARCHAR}, #{item.landPracticalUse,jdbcType=VARCHAR}, 
        #{item.landUseEndDate,jdbcType=TIMESTAMP}, #{item.landLegalYear,jdbcType=DECIMAL}, 
        #{item.landRemainingYear,jdbcType=DECIMAL}, #{item.setUseClassify,jdbcType=INTEGER}, 
        #{item.setUse,jdbcType=INTEGER}, #{item.bestUse,jdbcType=INTEGER}, #{item.floorArea,jdbcType=DECIMAL}, 
        #{item.evaluationArea,jdbcType=DECIMAL}, #{item.evaluationNumber,jdbcType=DECIMAL}, 
        #{item.evaluationNumberUnit,jdbcType=VARCHAR}, #{item.price,jdbcType=DECIMAL}, 
        #{item.factor,jdbcType=VARCHAR}, #{item.originalPrice,jdbcType=DECIMAL}, #{item.setPlotRatio,jdbcType=DECIMAL}, 
        #{item.planPlotRatio,jdbcType=VARCHAR}, #{item.actualPlotRatio,jdbcType=DECIMAL}, 
        #{item.standardJudgeId,jdbcType=INTEGER}, #{item.standardJudgeExplain,jdbcType=VARCHAR}, 
        #{item.judgeFunction,jdbcType=VARCHAR}, #{item.notApplicableReason,jdbcType=VARCHAR}, 
        #{item.mergeExplain,jdbcType=VARCHAR}, #{item.splitExplain,jdbcType=VARCHAR}, #{item.splitFrom,jdbcType=INTEGER}, 
        #{item.parcelOuterDevelop,jdbcType=VARCHAR}, #{item.parcelInnerDevelop,jdbcType=VARCHAR}, 
        #{item.parcelSettingInnerDevelop,jdbcType=VARCHAR}, #{item.currentSituation,jdbcType=VARCHAR}, 
        #{item.bisSplit,jdbcType=BIT}, #{item.bisMerge,jdbcType=BIT}, #{item.bisEnable,jdbcType=BIT}, 
        #{item.bisSetFunction,jdbcType=BIT}, #{item.sorting,jdbcType=INTEGER}, #{item.creator,jdbcType=VARCHAR}, 
        #{item.gmtCreated,jdbcType=TIMESTAMP}, #{item.gmtModified,jdbcType=TIMESTAMP})
    </foreach>
  </insert>
  <insert id="batchInsertSelective" keyColumn="id" keyProperty="list.id" parameterType="map" useGeneratedKeys="true">
    insert into tb_scheme_judge_object (
    <foreach collection="selective" item="column" separator=",">
      ${column.escapedColumnName}
    </foreach>
    )
    values
    <foreach collection="list" item="item" separator=",">
      (
      <foreach collection="selective" item="column" separator=",">
        <if test="'pid'.toString() == column.value">
          #{item.pid,jdbcType=INTEGER}
        </if>
        <if test="'project_id'.toString() == column.value">
          #{item.projectId,jdbcType=INTEGER}
        </if>
        <if test="'area_group_id'.toString() == column.value">
          #{item.areaGroupId,jdbcType=INTEGER}
        </if>
        <if test="'original_area_group_id'.toString() == column.value">
          #{item.originalAreaGroupId,jdbcType=INTEGER}
        </if>
        <if test="'declare_record_id'.toString() == column.value">
          #{item.declareRecordId,jdbcType=INTEGER}
        </if>
        <if test="'building_status'.toString() == column.value">
          #{item.buildingStatus,jdbcType=INTEGER}
        </if>
        <if test="'basic_apply_id'.toString() == column.value">
          #{item.basicApplyId,jdbcType=INTEGER}
        </if>
        <if test="'number'.toString() == column.value">
          #{item.number,jdbcType=VARCHAR}
        </if>
        <if test="'original_number'.toString() == column.value">
          #{item.originalNumber,jdbcType=VARCHAR}
        </if>
        <if test="'split_number'.toString() == column.value">
          #{item.splitNumber,jdbcType=INTEGER}
        </if>
        <if test="'name'.toString() == column.value">
          #{item.name,jdbcType=VARCHAR}
        </if>
        <if test="'cert_name'.toString() == column.value">
          #{item.certName,jdbcType=VARCHAR}
        </if>
        <if test="'ownership'.toString() == column.value">
          #{item.ownership,jdbcType=VARCHAR}
        </if>
        <if test="'seat'.toString() == column.value">
          #{item.seat,jdbcType=VARCHAR}
        </if>
        <if test="'cert_use'.toString() == column.value">
          #{item.certUse,jdbcType=VARCHAR}
        </if>
        <if test="'practical_use'.toString() == column.value">
          #{item.practicalUse,jdbcType=VARCHAR}
        </if>
        <if test="'land_cert_use'.toString() == column.value">
          #{item.landCertUse,jdbcType=VARCHAR}
        </if>
        <if test="'land_practical_use'.toString() == column.value">
          #{item.landPracticalUse,jdbcType=VARCHAR}
        </if>
        <if test="'land_use_end_date'.toString() == column.value">
          #{item.landUseEndDate,jdbcType=TIMESTAMP}
        </if>
        <if test="'land_legal_year'.toString() == column.value">
          #{item.landLegalYear,jdbcType=DECIMAL}
        </if>
        <if test="'land_remaining_year'.toString() == column.value">
          #{item.landRemainingYear,jdbcType=DECIMAL}
        </if>
        <if test="'set_use_classify'.toString() == column.value">
          #{item.setUseClassify,jdbcType=INTEGER}
        </if>
        <if test="'set_use'.toString() == column.value">
          #{item.setUse,jdbcType=INTEGER}
        </if>
        <if test="'best_use'.toString() == column.value">
          #{item.bestUse,jdbcType=INTEGER}
        </if>
        <if test="'floor_area'.toString() == column.value">
          #{item.floorArea,jdbcType=DECIMAL}
        </if>
        <if test="'evaluation_area'.toString() == column.value">
          #{item.evaluationArea,jdbcType=DECIMAL}
        </if>
        <if test="'evaluation_number'.toString() == column.value">
          #{item.evaluationNumber,jdbcType=DECIMAL}
        </if>
        <if test="'evaluation_number_unit'.toString() == column.value">
          #{item.evaluationNumberUnit,jdbcType=VARCHAR}
        </if>
        <if test="'price'.toString() == column.value">
          #{item.price,jdbcType=DECIMAL}
        </if>
        <if test="'factor'.toString() == column.value">
          #{item.factor,jdbcType=VARCHAR}
        </if>
        <if test="'original_price'.toString() == column.value">
          #{item.originalPrice,jdbcType=DECIMAL}
        </if>
        <if test="'set_plot_ratio'.toString() == column.value">
          #{item.setPlotRatio,jdbcType=DECIMAL}
        </if>
        <if test="'plan_plot_ratio'.toString() == column.value">
          #{item.planPlotRatio,jdbcType=VARCHAR}
        </if>
        <if test="'actual_plot_ratio'.toString() == column.value">
          #{item.actualPlotRatio,jdbcType=DECIMAL}
        </if>
        <if test="'standard_judge_id'.toString() == column.value">
          #{item.standardJudgeId,jdbcType=INTEGER}
        </if>
        <if test="'standard_judge_explain'.toString() == column.value">
          #{item.standardJudgeExplain,jdbcType=VARCHAR}
        </if>
        <if test="'judge_function'.toString() == column.value">
          #{item.judgeFunction,jdbcType=VARCHAR}
        </if>
        <if test="'not_applicable_reason'.toString() == column.value">
          #{item.notApplicableReason,jdbcType=VARCHAR}
        </if>
        <if test="'merge_explain'.toString() == column.value">
          #{item.mergeExplain,jdbcType=VARCHAR}
        </if>
        <if test="'split_explain'.toString() == column.value">
          #{item.splitExplain,jdbcType=VARCHAR}
        </if>
        <if test="'split_from'.toString() == column.value">
          #{item.splitFrom,jdbcType=INTEGER}
        </if>
        <if test="'parcel_outer_develop'.toString() == column.value">
          #{item.parcelOuterDevelop,jdbcType=VARCHAR}
        </if>
        <if test="'parcel_inner_develop'.toString() == column.value">
          #{item.parcelInnerDevelop,jdbcType=VARCHAR}
        </if>
        <if test="'parcel_setting_inner_develop'.toString() == column.value">
          #{item.parcelSettingInnerDevelop,jdbcType=VARCHAR}
        </if>
        <if test="'current_situation'.toString() == column.value">
          #{item.currentSituation,jdbcType=VARCHAR}
        </if>
        <if test="'bis_split'.toString() == column.value">
          #{item.bisSplit,jdbcType=BIT}
        </if>
        <if test="'bis_merge'.toString() == column.value">
          #{item.bisMerge,jdbcType=BIT}
        </if>
        <if test="'bis_enable'.toString() == column.value">
          #{item.bisEnable,jdbcType=BIT}
        </if>
        <if test="'bis_set_function'.toString() == column.value">
          #{item.bisSetFunction,jdbcType=BIT}
        </if>
        <if test="'sorting'.toString() == column.value">
          #{item.sorting,jdbcType=INTEGER}
        </if>
        <if test="'creator'.toString() == column.value">
          #{item.creator,jdbcType=VARCHAR}
        </if>
        <if test="'gmt_created'.toString() == column.value">
          #{item.gmtCreated,jdbcType=TIMESTAMP}
        </if>
        <if test="'gmt_modified'.toString() == column.value">
          #{item.gmtModified,jdbcType=TIMESTAMP}
        </if>
      </foreach>
      )
    </foreach>
  </insert>
</mapper>